[{"content":"Object Detection 모델을 학습할 때, 모델에서 예측한 후보 box와 GT box를 매칭한 뒤, 매칭된 box들 사이의 Loss를 구하게 됩니다. 이러한 매칭 과정을 Label Assignment라고 합니다. 적절한 매칭이 이루어지지 않으면 잘못된 정보를 학습할 수 있기 때문에, 학습 과정에서 굉장히 중요한 요소 중 하나입니다. 본 포스트에서는 다양한 Label Assignment 기법들에 대해 알아보겠습니다.\n목차 Fixed Label Assignment Dynamic Label Assigment Fixed Label Assignment Fixed Label Assignment는 threshold와 같은 사전에 정의된 고정된 값에 따라 Label을 할당합니다. IoU 사용: 예측한 box와 GT 사이의 IoU를 구해, 일정 threshold를 넘으면 해당 prediction과 GT를 매칭합니다. 중심 좌표 사용: 예측한 box의 중심과 GT box의 중심 사이의 거리가 일정 threshold를 넘으면 해당 prediction과 GT를 매칭합니다. Fixed Label Assignment는 고정된 threshold를 사용하기 때문에 아래와 같이 여러 개의 GT가 겹쳐 있는 경우 할당이 잘 못 되는 경우가 생길 수 있고, 이에 따라 학습에 혼동을 줄 수 있습니다. 출처: Ge, Zheng, et al. \u0026ldquo;Ota: Optimal transport assignment for object detection.\u0026rdquo; Proceedings of the IEEE/CVF conference on computer vision and pattern recognition. 2021, Figure 1.\nDynamic Label Assigment Bipartite matching\n예측한 box와 GT간의 Global한 optimal matching을 찾는 방법으로 하나의 예측 box에 하나의 GT만 matching하게 됩니다. 아래는 DETR에서 사용되는 Bipartite matching을 설명한 사진으로, 각 object query가 decoder를 거친 후, prediction heads에서 Hungarian 알고리즘을 통한 Bipartite matching을 거쳐 하나의 GT 혹은 no object를 할당받게 됩니다. 출처: Carion, Nicolas, et al. \u0026ldquo;End-to-end object detection with transformers.\u0026rdquo; European conference on computer vision. Cham: Springer International Publishing, 2020, Figure 2. 각 예측값에 GT가 독립적으로 할당되기 때문에 애매한 케이스들 사이에 생겨나는 학습 간섭이 덜하고, 중복을 자동으로 제거해 주는 장점이 있습니다. Bipartite matching에서 많이 사용되는 Hungarian 알고리즘의 경우 시간 복잡도가 O(n³)로 매우 높아, 예측값이나 GT가 많을 경우 시간이 오래걸리는 단점이 있습니다. OTA(Optimal Transport Assignment)\n예측 box와 GT box의 매칭을 cost를 고려한 Optial Transport 문제로 정의합니다. cost는 예측 box와 GT의 class를 고려한 cross entropy loss와 위치를 고려한 IoU loss 값으로 정의됩니다. cost matrix가 정의되었을 때, OT 문제는 Sinkhorn-Knopp Iteration을 통해 풀 수 있습니다. 아래는 OTA 알고리즘입니다.\n출처: Ge, Zheng, et al. \u0026ldquo;Ota: Optimal transport assignment for object detection.\u0026rdquo; Proceedings of the IEEE/CVF conference on computer vision and pattern recognition. 2021, Algorithm 1. Bipartite matching과 달리 1대 다 매칭이 됩니다. Sinkhorn Algorithm를 푸는 과정이 오래 걸린다는 단점이 있습니다. simOTA\nOT 문제를 Sinkhorn 알고리즘으로 푸는 것은 학습 시간이 추가적으로 25%가 증가합니다. 복잡하고 시간이 오래 걸리는 Sinkhorn 알고리즘을 top-K 선택으로 단순화 한 방법입니다. YOLOX에서 처음 도입되었습니다. GT $ g_i $ prediction $ p_i $ 사이의 cost는 아래와 같이 계산됩니다. $ c_{ij} = L_{ij}^{cls} + \\lambda L_{ij}^{reg} $ $ g_i $ 에 대해 cost가 작은 top-k개 prediction을 찾아 positive로 할당합니다. ","date":"2023-09-28T00:17:41+09:00","permalink":"https://kimberlykang.github.io/ko/p/label_assignment/","title":"Label Assignment"},{"content":"본 포스트에서는 2019년 Google이 발표한 \u0026ldquo;XLNet: Generalized Autoregressive Pretraining for Language Understanding\u0026quot;을 살펴보겠습니다.\nhttps://arxiv.org/pdf/1906.08237.pdf\n목차 AutoRegressive vs. Auto Encoding Permutation Language Modeling Two-Stream Self-Attention AutoRegressive vs. Auto Encoding AutoRegressive (AR) Lauguage Modeling input token sequence가 주어졌을 때, 다음 token을 예측합니다. 아래 likelihood를 최대화하도록 pre-training합니다. $ \\underset{θ}{max} \\log p_θ ({\\bf x} ) = \\displaystyle{\\sum_{t=1}^{T}} \\log p_θ (x_t | {\\bf x_{\\rm \u0026lt; t}}) = \\displaystyle{\\sum_{t=1}^{T}} \\log \\frac{exp(h_θ({\\bf x_{\\rm 1:t-1}})_t^{\\top} e(x_t))}{ \\sum _{x\u0026rsquo;} exp(h_θ({\\bf x _{\\rm 1:t-1}})^{\\top} e(x\u0026rsquo;))} $ $ {\\bf x} = [x_1, \u0026hellip;, x_T]$: text sequence $ h_θ({\\bf x _{\\rm 1:t-1}}) $: RNNs, Transformer와 같은 neural model을 통해서 얻은 context representation $ e(x) $: x의 embedding exp는 softmax를 위해 사용되었습니다. 각 단어는 그 단어 이전에 나온 단어들을 보고 예측이 됩니다. Auto Encoding(AE) ex) BERT input sequence의 일부 token을 mask한 뒤, mask된 token의 원래 token을 예측합니다. 아래 likelihood를 최대화하도록 pre-training합니다. $ \\underset{θ}{max} \\log p_θ ({\\bf \\bar x} | {\\bf \\hat x}) ≈ \\displaystyle{\\sum_{t=1}^{T}}m_t \\log p_θ (x_t | {\\bf \\hat x}) = \\displaystyle{\\sum_{t=1}^{T}}m_t \\log \\frac{exp(H_θ({\\bf \\hat x})_t^{\\top} e(x_t))}{ \\sum _{x\u0026rsquo;} exp(H_θ({\\bf \\hat x})_t^{\\top} e(x\u0026rsquo;))} $ $ {\\bf x} = [x_1, \u0026hellip;, x_T]$: text sequence $ {\\bf \\hat x} $: random하게 $ {\\bf x}$의 token을 [MASK]으로 바꾼 corrupted version $ {\\bf \\bar x} $: masked token $ m_t=1 $: $x_t$가 masked $ H_θ $: text sequence를 hidden vector로 매핑하는 Transformer $ e(x) $: x의 embedding exp는 softmax를 위해 사용되었습니다. approximate factorization입니다. 학습 목표는 $ {\\bf \\hat x} $로부터 $ {\\bf \\bar x} $를 복원하는 것입니다. Permutation Language Modeling Independence Assumption BERT에서는 모든 masked token들은 독립적이라고 가정하고, 따로 예측을 합니다. ex) [New, York, is, a, city]에서 [New, York]를 prediction target이라고 할 때 BERT와 XLNet의 objectives는 아래와 같습니다. $ {\\cal J}_{BERT} = \\log p(\\text{New} | \\text{is a city}) + \\log p(\\text{York} | \\text{is a city})$ $ {\\cal J}_{XLNet} = \\log p(\\text{New} | \\text{is a city}) + \\log p(\\text{York} | \\textcolor{red}{\\text{New}} \\text{, is a city})$ BERT에서 York의 예측은 New의 예측에 independent합니다. BERT에서는 (New, York) 사이의 dependency를 찾지 못하지만, XLNet은 이를 고려하여 학습합니다. AutoRegressive를 사용하면 [New, York, is]를 보고 a를 예측해야 합니다. XLNet은 이러한 한계를 순열을 사용하여 극복합니다. Permutation Language Modeling Objective 길이가 T인 sequence x에 대해 T!개의 각기 다른 순서가 존재합니다. 모든 factorization 순서에 대해 parameter를 공유함으로써 모델은 모든 위치에서 양 방향의 정보를 학습하게 됩니다. independence assumption을 하지 않고, [MASK]를 사용하지 않기 때문에 pretrain-finetune discrepancy도 없게 됩니다. factorization order에만 순열을 사용하고 sequence order는 기존 순서를 사용합니다. 즉, positional encoding는 기존 sequence order에 따라 이루어집니다. objective는 아래와 같습니다. $ \\underset{θ}{max} \\Bbb E_{{\\bf z} \\sim \\cal Z_t} [\\displaystyle{\\sum_{t=1}^{T}} \\log p_θ (x_{z_t} | {\\bf x_{z \\rm \u0026lt; t}})] $ $ \\cal Z_t $: 가능한 모든 순열입니다. $ z_t $: 순열의 t번째 값입니다. factorization order $ {\\bf z} $를 샘플링한 후 factorization order에 따라 likelihood $ \\log p_θ $를 계산합니다. ex) New York is a city 순열 1: [New, York, is, a, city]. New -\u0026gt; York -\u0026gt;is 를 보고 a를 예측합니다. 순열 2: [city, York, New, is, a]. city -\u0026gt; York -\u0026gt; New -\u0026gt; is를 보고 a를 예측합니다. 위치상으로 a 뒤에 있는 city를 보고 a를 예측하게 됩니다. 순열을 사용함으로써 bidirectional context를 학습하게 됩니다. 출처: Yang, Zhilin, et al. \u0026ldquo;Xlnet: Generalized autoregressive pretraining for language understanding.\u0026rdquo; Advances in neural information processing systems 32 (2019), Figure 4.\n위의 순열로 뽑은 factorization order에 따른 $ \\log p_θ $를 구한 뒤 expectation을 구합니다. mem는 transformer XL의 특징으로 긴 sequence 학습이 가능하게 해 주는 것으로 gradient가 적용이 안 됩니다. Two-Stream Self-Attention Target Position을 고려한 Re-parameterization 기존 transformer 사용시 t까지 순서가 동일하고 t에서의 순서는 다른 순열 $ {\\bf z}^{(1)} $, $ {\\bf z}^{(2)} $가 있을 때, 기존의 방법을 사용하면 아래와 같은 문제가 발생합니다. $ {\\bf z}^{(1)}_t $, $ {\\bf z}^{(2)}_t $ 값이 달라 서로 다른 target position을 갖고 따라서 다른 ground-truth를 갖지만, 동일한 model prediction을 하게 됩니다. $ {\\bf x_{z \\rm \u0026lt; t}} $와 함께 target position $ z_t $를 추가로 input으로 받는 새로운 representation $ g_θ({\\bf x_{z \\rm \u0026lt; t}}, z_t) $를 사용하여 아래와 같이 prediction을 합니다. $ p_θ (X_{x_{z_t}}=x | x_{z \u0026lt; t}) = \\frac{exp(e(x)^{\\top} g_θ({\\bf x_{z \\rm \u0026lt; t}}, z_t))}{ \\sum _{x\u0026rsquo;} exp(e(x\u0026rsquo;)^{\\top} g_θ({\\bf x _{z \\rm \u0026lt; t}}, z_t) )}$ 두 개의 hidden representation을 사용 $ g_θ({\\bf x _{z \\rm \u0026lt; t}}, z_t) $의 조건 content $ x_{z_t} $를 사용하면 학습이 일어나지 않기 때문에, content $ x_{z_t} $는 사용하지 않고 position $ z_t $만 사용해야 합니다. j\u0026gt;t인 $ x_{z_j} $를 예측하기 위해서는 content $ x_{z_t}$는 사용하지 않지만 contextual information을 갖고 있긴 해야 합니다. hidden representation content representation $ h_θ({\\bf x_{z \\rm ≤ t}}) $: 기존 Transformer의 hidden state와 비슷한 역할을 합니다. context와 $ x_{z_t} $를 모두 encode합니다. query representation $ g_θ({\\bf x_{z \\rm \u0026lt; t}}, z_t) $ t 이전의 contextual information과 position $ z_t $를 encode합니다. $ h_i^{(0)}=e(x_i) $. content stream은 첫 layer는 word embedding입니다. $ g_i^{(0)}=w $. query stream은 첫 layer는 학습이 되는 vector로 initialize 됩니다. update query stream: $ g_{z_t}^{(m)} ← Attention(Q=g_{z_t}^{(m-1)}, KV=h_\\textcolor{red}{{\\bf z} \u0026lt; t}^{(m-1)}; θ)$ content stream: $ h_{z_t}^{(m)} ← Attention(Q=h_{z_t}^{(m-1)}, KV=h_\\textcolor{red}{{\\bf z} ≤ t}^{(m-1)}; θ)$ query stream에서는 $z_t$는 사용하지만, $ x_{z_t} $는 사용하지 않습니다. 반면에 content stream에서는 $z_t$, $ x_{z_t} $ 둘 다 사용합니다. 출처: Yang, Zhilin, et al. \u0026ldquo;Xlnet: Generalized autoregressive pretraining for language understanding.\u0026rdquo; Advances in neural information processing systems 32 (2019), Figure 1.\nfactorization order이 3 -\u0026gt; 2 -\u0026gt; 4 -\u0026gt; 1일 때, 다음 layer의 $h_3^{(1)}$ 자기 자신을 포함한 이전 시점의 이전 layer를 attend합니다. 즉, $h_1^{(0)}, h_2^{(0)}, h_3^{(0)}$을 attend 합니다. 다음 layer의 $g_3^{(1)}$ 이전 시점의 이전 layer만을 attend합니다. 즉, $h_1^{(0)}, h_2^{(0)}$을 attend 합니다. 마지막 layer에서는 g에서 token을 예측합니다. 위와 같은 attention 방식으로 인해 prediction layer에서는 현재 word embedding의 정보를 직접적으로 얻지 못하기 때문에 학습이 잘 됩니다. 출처: Yang, Zhilin, et al. \u0026ldquo;Xlnet: Generalized autoregressive pretraining for language understanding.\u0026rdquo; Advances in neural information processing systems 32 (2019), Figure 5.\n출처: Yang, Zhilin, et al. \u0026ldquo;Xlnet: Generalized autoregressive pretraining for language understanding.\u0026rdquo; Advances in neural information processing systems 32 (2019), Figure 6.\n","date":"2023-08-31T00:17:41+09:00","permalink":"https://kimberlykang.github.io/ko/p/xlnet_review/","title":"XLNet 리뷰"},{"content":"본 포스트에서는 2018년 Google이 발표한 \u0026ldquo;BERT : Pre-training of Deep Bidirectional Trnasformers for Language Understanding\u0026quot;을 살펴보겠습니다.\nhttps://arxiv.org/pdf/1810.04805.pdf\n목차 모델 구조 Input Pre-training Fine-tuning 네트워크 구조 학습 테스트 모델 구조 출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Figure 3.\nGPT: left-to-right Transformer를 사용합니다.\nELMo: left-to-right LSTM, right-to-left LSTM을 따로 학습 후, concatenate해서 사용합니다. feature-based approach입니다.\nBERT\nbi-directional transformer를 사용합니다. 예측을 하지 않고 자기 자신의 token을 참조할 수 있는 bi-directional 모델의 문제점을 두 가지 pre-training task로 극복합니다. parameter 갯수는 BERT base가 110M, BERT large가 340M입니다. GPT와 BERT의 차이점\nGPT는 BooksCorpus(800M 단어)로만 학습하고, BERT는 BooksCorpus와 Wikipedia(2,500M 단어)로 학습했습니다. GPT는 [SEP]와 [CLS]를 fine-tuning에서만 사용했고, BERT는 [SEP], [CLS], sentence A/B embedding을 pre-training에도 사용했습니다. GPT는 32,000 단어의 batch size로 1M step을 학습했고, BERT는 128,000 단어의 batch size로 1M step을 학습했습니다. GPT는 전체 fine-tuning 실험에서 동일한 learning rate를 사용했고, BERT는 task-specific한 learning rate을 사용했습니다. Input 출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Figure 2.\nToken embeddings WordPiece embedding을 사용합니다.(We use WordPiece emgeddings with a 30,000 token vocabulary.) vocab_size=30522로 522개는 빈 토큰인 것으로 보입니다. [CLS]: 모든 sequence는 [CLS] token으로 시작하며, classification task에 사용됩니다. [SEP]: Sequence 안의 sentence를 나누기 위해서 사용됩니다. Segment Embeddings: 첫 번째 sentence인지 두 번째 sentence인지 구분하기 위해 사용됩니다. Position Embeddings: 각 토큰이 얼마나 떨어져 있는지 나타내기 위해 사용됩니다. Pre-training unlabled data를 사용하여 두 가지 unsupervised task를 학습합니다.\nTask1: Masked LM(MLM) 전체 input token의 15%를 random하게 mask한 뒤, 이에 해당하는 마지막 hidden vector가 전체 vocabulary에 대한 softmax를 수행합니다. fine-tuning에서는 [MASK] token이 없기 때문에, mask하도록 선택된 15% 중, 80%는 [MASK] token으로 바꾸고, 10%는 random한 다른 token으로 바꾸며 나머지 10%는 바꾸지 않은 채 예측을 합니다. 아래 그림은 sequence \u0026quot;my dog is cutep [SEP] he likes play ###ing[SEP]\u0026quot;에 mask 적용 후 예측을 하는 그림입니다.\n출처: https://wikidocs.net/115055 \u0026lsquo;dog\u0026rsquo;은 [MASK]로 변경되었습니다. \u0026lsquo;he\u0026rsquo;는 \u0026lsquo;king으로 변경되었습니다. \u0026lsquo;play\u0026rsquo;는 변경되지 않았습니다. \u0026lsquo;dog\u0026rsquo;, \u0026lsquo;he\u0026rsquo;, \u0026lsquo;play\u0026rsquo;에 해당되는 토큰의 마지막 hidden vector는 Fully Connected Layer를 거쳐 softmax를 하여 전체 vocabulary에 대한 확률을 구합니다. Task2: Next Sentence Prediction(NSP) sentence A, B를 선택할 때, 50%의 경우에는 B로 A 다음에 이어지는 sentence를, 나머지 50%의 경우에는 B로 corpus에서 random한 sentence를 선택합니다.\n아래는 sentence 예시입니다.\nInput = [CLS] the man went to [MASK] store [SEP] he bought a gallon [MASK] milk [SEP] Label = IsNext Input = [CLS] the man [MASK] to the store [SEP] penguin [MASK] are flight ##less birds [SEP] Label = NotNext\n[CLS] toekn의 마지막 hidden vector가 IsNext/NotNext classification을 하는 데 사용됩니다. 출처: https://wikidocs.net/115055\nFine-tuning pre-train 한 parameter로 initialize한 뒤, downstream task를 위한 labeled data로 fine-tune 합니다.\noutput layer 하나만 추가되므로, scratch부터 학습되는 parameter 갯수는 매우 적습니다.\nSentence Pair Classification Tasks Dataset MNLI: 첫 번째 sentence를 고려했을 때, 두 번째 sentence가 참, 거짓, 판단불가인지 선택합니다. QQP: 질문 두 개가 의미상으로 동일한지 판단합니다. QNLI: 질문에 대한 정확한 대답이 있는지 판단합니다. STS-B: 두 문장이 얼마나 비슷한지 1~5점 중 선택합니다. MRPC: 두 문장이 의미상으로 동일한지 판단합니다. RTE: 첫 번째 sentence를 고려했을 때, 두 번째 sentence가 참, 거짓, 판단불가인지 선택합니다. SWAG: sentence가 주어졌을 때 네 개의 선택지 중 가장 다음 문장으로 적합한 문장을 고르는 문제를 네 개로 나누어 적합한지 판단하는 문제로 변경합니다. C는 [CLS] token의 마지막 hidden vector로 $C∈R^H$입니다. H는 hidden size로 $BERT_{BASE}$는 768, $BERT_{LARGE}$는 1024입니다. 새로 학습해야 하는 parameter는 classification layer의 weight $W∈\\mathbb R^{K \\times H}$입니다. K는 클래스 갯수입니다. 출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Figure 4, (a). 결과 출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Table 1.\n출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Table 4. Single Sentence Classification Tasks Dataset SST-2: sentiment를 판단합니다. CoLA: 문장이 언어학적으로 \u0026ldquo;acceptable\u0026rdquo; 한 지 판단합니다. Sentence Pair Classification Tasks에서와 같이 fine-tuning과 더불어 classification layer의 weight $W∈\\mathbb R^{K \\times H}$를 학습합니다.\n출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Figure 4, (b). Question Answering Tasks Dataset SQuAD v1.1: Question에 대한 answer을 passage 안에서 찾습니다. SQuAD v2.0 Question을 A embedding으로, passage를 B embedding으로 나타냅니다. fine-tuning에서 start vector $S∈R^H$와 end vector $E∈R^H$를 학습합니다. 각 token의 마지막 hidden vector T와 S와 E와 사이의 dot product와 softmax를 구해 start와 end 를 결정합니다.\n출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Figure 4, (c). Single Sentence Tagging Tasks Dataset CoNLL-2003 NER\n출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Figure 4, (d). 결과\n출처: Devlin, Jacob, et al. \u0026ldquo;Bert: Pre-training of deep bidirectional transformers for language understanding.\u0026rdquo; arXiv preprint arXiv:1810.04805 (2018), Table 7. ","date":"2023-08-02T00:17:41+09:00","permalink":"https://kimberlykang.github.io/ko/p/bert_review/","title":"BERT 리뷰"},{"content":"본 포스트에서는 2018년 발표된 \u0026ldquo;YOLOv3: An Incremental Improvement\u0026quot;를 살펴보겠습니다.\nYOLOv3: An Incremental Improvement\n목차 여러 Scale로 예측 결과 여러 Scale로 예측 출처: https://wikidocs.net/174008\nFeature pyramid network와 유사한 방식으로 3가지 scale에서 bounding box를 예측합니다. base feature extractor에 convolutional layer 몇 개를 붙인 뒤, 마지막 layer가 bounding box, objectness, class prediction을 예측합니다. 논문에서는 grid cell마다 3개의 ahchor box를 사용했습니다. 따라서 N이 feature map의 grid 갯수일 때, 각 feature map의 예측값은 N×N×[3*(4+1+80)]이 됩니다. 3가지 scale에서 3종류의 achor를 사용하므로, anchor 갯수는 총 9개가 됩니다. k=9로 k-means를 수행하여 anchor를 구합니다. COCO dataset의 경우, (10×13), (16×30), (33×23), (30×61), (62×45), (59×119), (116×90), (159×198), (373×326)의 anchor box를 사용합니다. 결과 출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;Yolov3: An incremental improvement.\u0026rdquo; arXiv preprint arXiv:1804.02767 (2018), Table 3.\n","date":"2023-07-04T00:09:40+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov3_review/","title":"YOLOv3 리뷰"},{"content":"본 포스트에서는 2017년 CVPR에 발표된 논문 \u0026ldquo;YOLO9000: Better, Faster, Stronger\u0026quot;을 살펴보겠습니다.\nYOLO9000: Better, Faster, Stronger\n목차 동기 Batch Normalization 높은 Resolution에서 classifier 학습 Anchor Box 사용 Dimension Clusters 예측값 Fine-Grained Features 네트워크 결과 동기 YOLOv1는 그 당시의 State-of-the-art(SOTA)였던 Fast-RCNN과 비교하여 localization error가 상당히 컸습니다. 또한, recall도 상대적으로 굉장히 낮았습니다. 즉, object를 빼먹고 찾은 경우가 많았습니다. YOLOv2에서는 네트워크 크기를 키우지 않고 빠른 속도를 유지하면서 localization error와 낮은 recall 문제를 해결한 방법들을 아래와 같이 고안하게 됩니다.\nBatch Normalization Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift covariate shift를 해결하기 위해 고안된 방법입니다. 이를 위해 한 layer에서 다음 layer로 넘어가기 전에, mini-batch 안의 데이터를 그 mini-batch의 평균과 분산으로 normalize 해 줍니다. 2015년 Proceedings of Machine Learning Research(PMLR)에 발표된 이후로 지금까지 활발하게 사용되고 있습니다. YOLOv2에서는 Batch Normalization을 사용 하여 mAP가 2% 상승했습니다. 또한 Batch Normalization이 regularization 역할을 해 주어서 네트워크에서 dropout 을 제거하여도 overfitting이 발생하지 않았습니다. 높은 Resolution에서 classifier 학습 object detection 모델들은 보통 ImageNet 데이터셋으로 classifier를 학습한 뒤, 학습한 네트워크를 object detection을 하도록 transfer learning을 해서 사용합니다.\nYOLOv1도 이 방법을 사용했는데, classification 학습에는 224×224 크기의 이미지를 사용했고, detection 학습에는 448×448 크기의 이미지를 사용했습니다. 그럼 네트워크는 object detection을 학습 할 때 object detectino 뿐만 아니라 달라진 input 해상도도 학습을 해야 하게 됩니다.\n위와 같은 현상을 방지하기 위해 YOLOv2는 object detection 학습 전 448×448 사이즈의 ImageNet 데이터에 대해 classification 학습을 10 epoch 수행했습니다. 그 결과 mAP가 4%가 증가했습니다.\nAnchor Box 사용 YOLOv1은 feature extractor에 Fully connected layer를 붙여서 bbox 좌표를 바로 예측했습니다. YOLOv2는 Fully connected layer를 제거하고, anchor box를 사용하여 offset을 학습했습니다. 그리고 각 anchor마다 class와 objectness를 예측했습니다. anchor box 사용 결과 mAP는 69.5에서 69.2로 살짝 떨어졌지만, recall은 81%에서 88%로 상승했습니다. Dimension Clusters YOLOv2에서는 anchor box를 직접 고르는 것 대신에 training set에 있는 bounding box에 k-means clustering을 수행해 anchor box를 골랐습니다. 거리를 구하는 metric으로 Euclidian distance를 사용하면 anchor box가 클 수록 error가 더 커지기 때문에, 이를 방지하기 위해 거리 metric으로 아래를 사용했습니다.\n$ d(box,centroid)=1-IOU(box, centroid) $ 아래는 다양한 k값에 대하여 학습 데이터에 있는 bounding box와 가장 가까운 centroid와의 IOU 값의 평균을 그린 그래프와, k=5일 때의 anchor box입니다.\n출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Figure 2\nk가 커질수록 모델은 더 복잡해지지만 성능은 더 좋아지는데, 두 가지를 고려해 논문에서는 k=5를 선택했습니다.\nk=5일 때 k-means clustering이 찾은 VOC 2007 데이터의 anchor box가 위 그림의 흰 색 박스, COCO 데이터의 anchor box가 위 그림의 파란색 박스입니다. 데이터에 따라 다른 모양의 anchor box가 선택되는 걸 볼 수 있습니다.\n출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Table 1\n위 표는 다양한 방법으로 anchor box를 생성했을 때 VOX 2007 데이터의 bounding box와 가장 가까운 anchor box와의 평균 IOU입니다.\nCluster SSE는 거리 metric으로 Sum of Squared Error(Euclidean distance)를 사용한 k-means, Cluster IOU는 거리 metric으로 위에 나온 IOU를 이용한 식을 사용한 k-means, Anchor Boxes는 Anchor가 처음 소개된 논문 [15]에서 사용한 anchor box입니다. [15]에서는 직접 뽑은 9개의 anchor를 사용했습니다.\n위 표에서 평균 IOU 값을 살펴보면, k-means를 사용 시 거리 metric으로 SSE를 사용했을 때보다 IOU를 사용했을 때 IOU 값이 높았습니다. 또한 직접 뽑은 Achorbox를 사용했을 때보다 IOU 사용 k-means를 사용했을 때가 평균 IOU 값이 높았습니다.\n예측값 YOLOv2가 예측 값을 알아보기 전에 먼저 예측에 사용된 용어를 살펴보겠습니다.\n$ (c_x, c_y) $: 셀의 좌 상단 꼭지점 좌표입니다. $ (b_x, b_y) $: bounding box 중심의 x, y 좌표입니다. $ (b_w, b_h) $: bounding box의 가로, 세로입니다. $ (p_w, p_h) $: box prior(anchor)의 가로, 세로입니다. $ (t_x, t_y, t_w, t_h, t_o) $: YOLOv2의 네트워크의 output 값입니다. target의 t를 사용합니다. YOLOv2가 예측하는 bounding box의 중심 x, y좌표, bounding box의 가로, 세로, confindence score는 아래와 같습니다.\n$ b_x=\\sigma(t_x) + c_x $ $ b_y=\\sigma(t_y) + c_y $ $ b_w=p_w e^{t_w}$ $ b_h=p_h e^{t_h}$ $ Pr(object) * IOU(b, object)=\\sigma(t_o)$ 출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Figure 3\nbounding box의 center 좌표를 예측할 때, logistic activation($\\sigma$)를 사용하여 예측값이 0과 1 사이 값이 되어 셀 안에서의 상대 좌표를 나타내게 됩니다. bounding box의 가로, 세로를 예측할 때는 prior로 사용되는 anchor box의 가로, 세로에 예측값을 곱합니다. Fine-Grained Features passthrough layer를 추가하여, 크기가 다른 feature map을 detection에 사용할 수 있도록 하였습니다.\ndetection에 사용되는 13×13 feature map과 바로 전 26×26 feature map을 passthrough layer를 통해 연결했습니다. (26×26×512) 크기의 feature map을 (13×13×2048)로 reshape한 뒤, 13×13 feature map에 concatenate해서 사용했습니다. 네트워크 VGG-16을 base feature extractor로 사용했습니다. VGG-16은 한 이미지에 대한 결과를 계산할 때 30.69 billion floating point operation을 합니다. 본 논문에서는 19개의 convolutional layer를 가진 Darknet 19를 사용했습니다. Darknet 19는 5.58 billion operation을 합니다. 결과 출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Table 2\n위 표는 VOC 2007 데이터에 대해 모델 종류별로 실험하여 얻은 mAP를 나타낸 표입니다. YOLOv1보다 mAP가 상당히 향상된 것을 볼 수 있습니다. 출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Table 3\n출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Figure 4\n위 표와 그림은 VOC 2007 데이터에 대해 여러가지 모델로 실험한 mAP와 FPS입니다. 각 YOLOv2 228×228, 352×352, 416×416, 480×480, 544×544는 동일한 weight를 가진 동일 모델을 이미지 사이즈만 다르게 해서 실험한 결과입니다. YOLOv2가 다른 모델과 mAP는 비슷하지만, FPS는 훨씬 높은 것을 볼 수 있습니다. 출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Table 4\n위 표는 PASCAL VOC 2012 데이터에 대한 각 모델의 테스트 결과입니다. YOLOv2는 mAP가 YOLO보다 훨씬 높고, Faster R-CNN(ResNet), SSD512 등과 비슷한 mAP를 가집니다. 출처: Redmon, Joseph, and Ali Farhadi. \u0026ldquo;YOLO9000: better, faster, stronger.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2017, Table 5\n위 표는 COCO test-dev2015 데이터에 대한 각 모델의 테스트 결과입니다. ","date":"2023-06-18T00:09:40+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov2_review/","title":"YOLOv2 리뷰"},{"content":"본 포스트에서는 2016년 CVPR에 발표된 논문 \u0026ldquo;You Only Look Once: Unified, Real-Time Object Detection\u0026quot;을 살펴보겠습니다.\nhttps://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Redmon_You_Only_Look_CVPR_2016_paper.pdf\n목차 개념 이해 Bounding Box Class Probability Output 네트워크 구조 Loss 테스트 개념 이해 YOLO에서는 이미지에서 object를 찾을 때, grid를 사용합니다. 이를 간략하게 살펴보면\n이미지를 S×S개의 grid로 나눕니다. 각 grid cell에서 B개의 bounding box의 좌표(x, y, w, h)와 그 bounding box의 confidence score(c)를 예측합니다. 각 grid cell마다 C개의 class probability를 예측합니다. confidence score과 class probability로 최종 score와 class를 결정하고, 이 때 score가 threshold보다 높은 bounding box가 최종 object detection의 결과가 됩니다. 위 이미지는 S=7, B=2일 때 하나의 grid에 대한 예측의 예시입니다. 각 grid cell마다 bounding box(x, y, w, h, c)를 두 세트씩 예측합니다. C=20일 때, 각 grid cell마다 20개의 class에 대한 class probability를 예측합니다. 지금까지 YOLO가 어떻게 object를 찾는지 대략적으로 살펴봤습니다. 아래에서는 각 예측값들이 어떻게 계산되고 어떤 의미를 갖는지 살펴보겠습니다.\nBounding Box bounding box는 (x, y, w, h, c)로 이루어져 있습니다.\n(x, y): bounding box 중심의 좌표. 각 grid cell마다 B개의 bounding box를 가진다는 의미는, 이 B개의 bounding box의 중심이 해당 grid cell 안에 있다는 의미입니다. box의 네 꼭지점은 bounding box 밖에 있어도 상관이 없습니다. grid cell 안에서 상대적으로 어느 위치에 있는지를 표시하며, 0~1 사이의 값을 가집니다. (w, h): bounding box의 너비, 높이. 전체 이미지 너비, 높이에 대해 상대적인 값을 사용하며 0~1 사이의 값을 가집니다. c: box가 object를 갖는 것에 대해 얼마나 확신하고, 그 box의 좌표가 얼마나 정확한 가에 대한 값입니다. $ Pr(Object) * IOU^{truth}_{pred} $ 좌표가 얼마나 정확한지를 계산할 때에는 예측한 좌표와 Ground Truth(GT) 사이의 Intersection Over Union(IOU)를 계산합니다. Class Probability C: 각 grid cell이 object를 가지고 있을 때의 class probability입니다. $ Pr(Class_i|Object) $ bounding box 갯수와 상관 없이 grid cell마다 한 세트의 class probability만 예측합니다. Output 이미지를 S×S grid로 나누고, 각 grid마다 B개의 bounding box와 C개 class에 대한 class probability가 있다고 할 때, 최종 output tensor의 shape은 S×S×(B*5+C)가 됩니다. PASCAL VOC 실험 예를 들면, S=7, B=2, C=20입니다. 따라서 총 49개의 grid가 있고, 각 grid cell마다 30개의 예측값을 갖게 됩니다. 아래는 30개의 예측값 중 하나의 예시입니다. [x, y, w, h, c, 배경일 확률, 비행기일 확률, \u0026hellip;, 모니터일 확률] [0.4, 0.3, 0.8, 0.7, 0.9, 0.003, 0.8, \u0026hellip; , 0.012] 네트워크 구조 GoogLeNet과 유사한 구조를 사용했습니다. 출처: Redmon, Joseph, et al. \u0026ldquo;You only look once: Unified, real-time object detection.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2016, Figure 3. Loss sum-squared error를 사용했습니다.\n$ \\lambda_{coor} $, $ \\lambda_{noobj} $ 사용\n대부분의 이미지는 object가 있는 grid cell보다 object가 없는 grid cell이 더 많습니다. 그래서 object가 없는 grid cell의 confidence score는 0에 가까워질 때의 gradient가 object가 있는 grid cell의 gradient보다 훨씬 커서 학습 초기에 모델이 diverge 하는 현상이 생길 수 있습니다. 이를 막기 위해, $ \\lambda_{coor}=5 $를 사용하여 bounding box 좌표 예측 loss는 증가시키고, $ \\lambda_{noobj}=0.5 $를 사용하여 object가 없는 box의 confidence 예측 loss는 감소시켰습니다. $ \\sqrt w $, $ \\sqrt h $ 예측\n큰 box는 편차가 조금 있어도 크게 상관 없지만 작은 box에는 큰 영향을 끼칩니다. 이 문제를 해결하기 위해 bounding box 너비와 높이 값에 루트를 씌워 줬습니다. 각 object에 가장 IOU가 높은 하나의 bounding box predictor만 할당했습니다.\nLoss function\n$ \\lambda_{coor} \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{obj} [(x_i-\\hat x_i)^2 + (y_i-\\hat y_i)^2] $\n$ + \\lambda_{coor} \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{obj} [(\\sqrt{w_i} - \\sqrt{\\hat w_i})^2 + (\\sqrt{h_i} - \\sqrt{\\hat h_i})^2] $\n$ + \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{obj} (C_i-\\hat C_i)^2 $ $ + \\lambda_{noobj} \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{noobj} (C_i-\\hat C_i)^2 $\n$ + \\displaystyle{\\sum_{i=0}^{s^2}} \\mathbb 1_{i}^{obj} \\displaystyle{\\sum_{c∈classwa}} (p_i(c)-\\hat p_i(c))^2 $\n1obji: cell i에 object가 나타났는지 여부를 의미합니다. 1objij: cell i에 있는 j번째 bounding box가 cell i에 있는 GT에 해당하는 예측값인지 여부입니다. 즉, cell i에 있는 j번째 bounding box가 GT와의 IOU가 가장 큰 지 여부입니다. 테스트 $ Pr(Class_i|Object) * Pr(Object) * {IOU}^{truth}_{pred} = Pr({Class}_i) * {IOU}^{truth}_{pred} $ 테스트할 때는 class probability와 confidence score를 곱해서 최종 score를 계산합니다. 최종 score는 해당 박스에 class가 나타날 확률과 예측한 box가 실제 object에 얼마나 잘 맞는 지 두 가지 의미를 모두 갖고 있습니다. 아래 그림의 bounding box 선의 굵기가 confidence를 의미합니다. 이 confidence와 class probability를 곱하여 threshold 이상의 결과가 최종 결과가 됩니다. 출처: Redmon, Joseph, et al. \u0026ldquo;You only look once: Unified, real-time object detection.\u0026rdquo; Proceedings of the IEEE conference on computer vision and pattern recognition. 2016, Figure 2. ","date":"2023-05-29T00:17:41+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov1_review/","title":"YOLOv1 리뷰"},{"content":"본 포스트에서는 YOLOv5의 Loss에 대해 살펴보겠습니다.\n목차 정보 이론 Binary Cross Entropy IoU Loss YOLOv5 Loss 정보 이론 Information\n사건 A가 일어날 확률이 P(A)라고 할 때, 이 사건의 정보량은 $I=-\\log P(A)$입니다. 예) 동전 던지기 앞면이 나오는 사건의 Information 확률: $ \\displaystyle \\frac{1}{2}$ $I=-\\log \\displaystyle \\frac{1}{2}$ Entropy\nInformation의 기댓값입니다. $ H(X)=- \\displaystyle \\sum_{x}P(X) \\log P(X)$ 예) 동전 던지기의 Entropy $Entropy= \\displaystyle{ -(\\frac{1}{2} \\times \\log \\frac{1}{2} + \\frac{1}{2} \\times \\log \\frac{1}{2})=-\\log \\frac{1}{2}}$ Kullback–Leibler divergence(KL Divergence)\n두 확률 분포의 다른 정도를 측정하는 값입니다. $ D_{KL}(P \\Vert Q)= \\displaystyle \\sum_{x}P(X) \\log \\frac{P(X)}{Q(X)} $\n$ = -\\displaystyle \\sum_{x}P(X) \\log Q(X) +\\sum_{x} P(X) \\log P(X)$\n첫 번째 term은 확률 분포 P를 가지는 데이터에 대해, 확률 분포 Q를 사용하여 Information을 계산한 뒤, 이의 기댓값인 Entropy를 계산한 값입니다. 두 번째 term은 확률분포 P의 Entropy 값입니다. 즉, KL divergence는 확률 분포 Q로 Information 계산했을 때, 실제 P로 계산했을 때 보다 얼마나 더 많이 Information을 가지는지를 의미합니다. Cross Entropy\n위 KL divergence 식의 첫 번째 term, 즉 확률 분포 P를 가지는 데이터에 대해, 확률 분포 Q를 사용하여 Information을 계산한 뒤, 이의 기댓값인 Entropy를 계산한 값을 Cross Entropy라고 합니다. $ H(P, Q)= -\\displaystyle \\sum_{x}P(X)\\log Q(X) $ KL divergence는 아래와 같이 정리할 수 있습니다. $ D_{KL}(P \\Vert Q)= H(P, Q) - H(P) $ P가 실제 확률 분포이고, Q가 P를 근사한 모델이 만든 확률 분포라고 했을 때, H(P)는 변하지 않는 값입니다. 따라서, KL divergence에서 Cross Entropy H(P, Q)가 Model의 Loss로 자주 사용됩니다. Binary Cross Entropy Cross Entropy Loss classification에서 data의 label y는 one-hot 벡터로 주어지는데, y가 위 Cross Entroy 식에서 확률분포 P가 됩니다. 모델의 output $\\hat y$ 은 주로 softmax function으로 계산한 각 클래스일 확률인데, 위 식에서 확률분포 Q가 됩니다. N이 데이터 갯수, y가 label, C가 클래스 갯수일 때, Cross Entropy Loss L는 아래와 같이 계산합니다. $ L= - \\displaystyle \\sum_{n}^{N} \\displaystyle \\sum_{c}^{C}y_{n, c} \\log \\hat{y}_{n, c}$ 이미지가 강아지, 고양이, 개구리 세 가지 클래스 중 어느 것인지 맞추는 classification 문제가 있다고 할 때, $y=\\begin{bmatrix} 0 \\cr 1 \\cr 0 \\end{bmatrix} $ (실제 label) $\\hat y=\\begin{bmatrix} 0.1 \\cr 0.7 \\cr 0.2 \\end{bmatrix} $ (예측 값) 이 이미지에 대한 Cross Entropy Loss $l$ 은 아래와 같습니다. $ l= -\\displaystyle \\sum_{c}^{C}y_c\\log \\hat{y}_c$\n$=0⋅\\log 0.1 + 1⋅\\log 0.7 + 0⋅\\log 0.2$ $=\\log 0.7$ Binary Cross Entropy 클래스 갯수가 두 개일 때의 Cross Entropy Loss의 특별한 케이스입니다. 모델의 output $\\hat y$은 주로 Sigmoid function으로 계산한 확률입니다. $ L= - \\displaystyle \\sum_{n}^{N} [y_n\\log \\hat{y}_n + (1-y_n)\\log (1-\\hat{y}_n)]$ BCEWithLogitsLoss Torch에서는 Sigmoid layer와 Binary Crosss Entropy를 합친 BCEWithLogitsLoss 클래스를 제공하고 있습니다. log-sum-exp trick을 사용하여 Sigmoid layer와 BCELoss를 따로 사용하는 것보다 numerically stable합니다. x가 Sigmoid의 input, y가 label, N이 데이터 갯수, w가 weight라고 할 때, unreduced loss L는 아래와 같이 계산합니다. $ L=\\begin{Bmatrix} l_{1}, \\cr \u0026hellip;, \\cr l_{N} \\end{Bmatrix}일 때, l_n= - w_n [(y_n\\log \\sigma (x_n)) + (1-y_n)\\log (1-\\sigma(x_n))]$ reduced loss L는 아래와 같이 계산합니다. $ L=\\begin{cases} mean(L), \\text{if reduction=\u0026lsquo;mean\u0026rsquo;} \\cr sum(L), \\text{if reduction= \u0026lsquo;sum\u0026rsquo;} \\end{cases} $ c가 class일 때, positive weight $p_c$를 사용하여 precision과 recall을 조절할 수 있습니다. 이 때, 식은 아래와 같이 바뀝니다. $ L_c=\\begin{Bmatrix} l_{1,c}, \\cr \u0026hellip;, \\cr l_{N, c} \\end{Bmatrix}일 때, l_{n, c}= - w_{n,c} [(p_c ​⋅ y_{n, c}\\log \\sigma (x_n)) + (1-y_{n, c})\\log (1-\\sigma(x_{n, c}))]$ $p_c\u0026gt;1$이면 recall이 증가하고, $p_c\u0026lt;1$면 precision이 증가합니다. dataset에 하나의 클래스에 대해 100개의 positive example과 300의 negative example이 있다면 $p_c=\\frac{300}{100}=3$이 되어야 합니다. torch.nn.BCEWithLogitsLoss(weight=None, size_average=None, reduce=None, reduction=\u0026lsquo;mean\u0026rsquo;, pos_weight=None) size_average, reduce는 deprecated된 parameter입니다. 1 2 3 4 5 6 target = torch.ones([10, 64], dtype=torch.float32) # 64 classes, batch size = 10 output = torch.full([10, 64], 1.5) # A prediction (logit) pos_weight = torch.ones([64]) # All weights are equal to 1 criterion = torch.nn.BCEWithLogitsLoss(pos_weight=pos_weight) criterion(output, target) # -log(sigmoid(1.5)) # tensor(0.20...) IoU Loss Intersection over Union(IoU) scale invariant Convex A, B가 있을 때 IoU는 아래와 같이 계산됩니다. $ IoU= \\displaystyle \\frac{|A∩B|}{|A∪B|} $ $L_{IoU}=1-IoU$ IoU가 0인 경우, 즉 두 Object Detection에서 타겟 box와 예측 box가 겹치지 않은 경우, IoU는 오차의 정도가 어느 정도인지를 나타내지 않습니다. 따라서 Gradient Vanishing 문제가 발생합니다. Generalized-IoU(GIoU) Generalized Intersection Over Union: A Metric and a Loss for Bounding Box Regression A, B를 포함하는 가장 작은 convex를 C라고 할 때, GIoU는 아래와 같이 계산됩니다. $ GIoU=IoU- \\displaystyle \\frac{|C \\backslash (A∪B)|}{|C|} $ $ C \\backslash (A∪B)$ 차집합을 의미합니다. $L_{GIoU}=1-GIoU$. 이 때, Loss 값의 범위는 0~2입니다. 타겟 box가 예측 box를 포함하고 있을 때, 페널티 텀이 0이 되어서 $L_{IoU}$ 값과 같은 값을 가지게 됩니다. 출처: Zheng, Zhaohui, et al. \u0026ldquo;Distance-IoU loss: Faster and better learning for bounding box regression.\u0026rdquo; Proceedings of the AAAI conference on artificial intelligence. Vol. 34. No. 07. 2020, Figure 2 수렴 속도가 느리고, box의 정확도가 비교적 낮습니다. Distance-IoU(DIoU) \u0026amp; Complete IoU(CIoU) Distance-IoU Loss: Faster and Better Learning for Bounding Box Regression 일반적으로 IoU 기반의 loss를 $L_{IoU}=1-IoU + \\mathcal{R}(B, B^{gt})$로 정의할 수 있습니다. DIoU $ \\mathcal{R}_{DIoU} = \\displaystyle \\frac{ρ^2(b, b^{gt})}{c^2}$. ρ는 두 box 중심 사이의 유클리디안 거리이고, c는 두 box를 포함하는 가장 작은 box의 대각 길이입니다.\n출처: Zheng, Zhaohui, et al. \u0026ldquo;Distance-IoU loss: Faster and better learning for bounding box regression.\u0026rdquo; Proceedings of the AAAI conference on artificial intelligence. Vol. 34. No. 07. 2020, Figure 5 $L_{DIoU}=1-IoU + \\mathcal{R}_{DIoU}$. 이 때, Loss 값의 범위는 0~2입니다. 두 box 사이의 거리를 minimize하기 때문에 GIoU Loss보다 빠르게 수렴합니다. CIoU DIoU에 aspect ratio를 추가적으로 고려한 방법입니다. $ \\mathcal{R}_{CIoU} = \\displaystyle \\frac{ρ^2(b, b^{gt})}{c^2} + \\alpha v$ $\\alpha = \\displaystyle \\frac{v}{(1-IoU) + v}$ non-overlapping한 경우 regression에 더 높은 priority를 가지게 합니다. $v = \\displaystyle \\frac{4}{\\pi^2}(arctan\\frac{w^{gt}}{h^{gt}} - arctan\\frac{w}{h})^2$ aspect ratio가 일치하는 정도를 측정합니다. $ \\displaystyle \\frac{4}{\\pi^2}$는 arctan 최댓값이 $\\frac{\\pi}{2}$이기 때문에 계산 결과 최댓값을 1로 만들기 위해 사용됩니다. $L_{CIoU}=1-IoU + \\mathcal{R}_{CIoU}$ DIoU를 사용한 Non-Maximum Suppression(NMS) 기존의 NMS에서는 불필요한 detection box를 제거하는 데 IoU metric이 사용됩니다. IoU는 겹치는 영역만 고려하기 때문에, occlusion이 있는 경우 잘못된 box가 제거되기도 합니다. DIoU는 겹치는 영역과 함께 두 box의 중심 거리를 고려하기 때문에, occlusion이 있는 경우에 NMS에 더 적합한 criterion이 될 수 있습니다. 가장 높은 score를 가진 예측 box를 $\\mathcal{M}$, NMS를 적용하는 다른 box를 $B$, classification score를 s, NMS threshold를 $\\epsilon$라고 했을 때, DIoU-NMS는 아래와 같이 정의됩니다. $ s_i= \\begin{cases} \\displaystyle s_i, \u0026amp; IoU -\\mathcal{R}(\\mathcal{M}, B_i) \u0026lt; \\epsilon \\\\ \\displaystyle 0, \u0026amp; IoU -\\mathcal{R}(\\mathcal{M}, B_i) ≥ \\epsilon \\end{cases} $ PASCAL VOC07+12로 학습한 YOLOv3 모델로 MS COCO 2017 데이터 중 하나를 detect한 예시입니다. 출처: Zheng, Zhaohui, et al. \u0026ldquo;Distance-IoU loss: Faster and better learning for bounding box regression.\u0026rdquo; Proceedings of the AAAI conference on artificial intelligence. Vol. 34. No. 07. 2020, Figure 8 실험 결과 $ L_{IoU} $, $ L_{GIoU} $, $ L_{DIoU} $, $ L_{CIoU} $ 를 사용하여 YOLOv3 모델을 학습한 결과입니다. (D)는 NMS시 IoU-NMS를 사용한 것을 의미합니다.\n출처: Zheng, Zhaohui, et al. \u0026ldquo;Distance-IoU loss: Faster and better learning for bounding box regression.\u0026rdquo; Proceedings of the AAAI conference on artificial intelligence. Vol. 34. No. 07. 2020, Table 1 $ L_{IoU} $, $ L_{GIoU} $, $ L_{DIoU} $, $ L_{CIoU} $ 를 사용하여 SSD 모델을 학습한 결과입니다. (D)는 NMS시 IoU-NMS를 사용한 것을 의미합니다.\n출처: Zheng, Zhaohui, et al. \u0026ldquo;Distance-IoU loss: Faster and better learning for bounding box regression.\u0026rdquo; Proceedings of the AAAI conference on artificial intelligence. Vol. 34. No. 07. 2020, Table 2 $ L_{IoU} $, $ L_{GIoU} $, $ L_{DIoU} $, $ L_{CIoU} $ 를 사용하여 Faster-RCNN 모델을 학습한 결과입니다. (D)는 NMS시 IoU-NMS를 사용한 것을 의미합니다.\n출처: Zheng, Zhaohui, et al. \u0026ldquo;Distance-IoU loss: Faster and better learning for bounding box regression.\u0026rdquo; Proceedings of the AAAI conference on artificial intelligence. Vol. 34. No. 07. 2020, Table 3 YOLOv5 Loss Box Loss\npbox: (prediction 갯수, anchor 갯수) iou: (prediction 갯수) 1 2 3 4 5 6 # Regression pxy = pxy.sigmoid() * 2 - 0.5 pwh = (pwh.sigmoid() * 2) ** 2 * anchors[i] pbox = torch.cat((pxy, pwh), 1) # predicted box iou = bbox_iou(pbox, tbox[i], CIoU=True).squeeze() # iou lbox += (1.0 - iou).mean() # iou loss Objectness Loss\ntarget box와 prediction box 사이의 IoU가 GT가 됩니다. scale마다 weight를 다르게 주어 Objectness Loss를 계산합니다. $ L_{obj}=4.0 ⋅L_{obj}^{small} +1.0 ⋅ L_{obj}^{medium} +0.4 ⋅ L_{obj}^{large}$ pi[..., 4]: (batch size, anchor 갯수, grid 갯수, grid 갯수) 모델이 예측한 objectness를 의미합니다. tobj: (batch size, anchor 갯수, grid 갯수, grid 갯수) 어떤 batch의 어떤 anchor의 어느 grid 위치에 해당되는 target objectness인지를 의미합니다. 1 2 3 4 5 6 7 8 9 10 11 12 # Objectness # BCEobj = nn.BCEWithLogitsLoss(pos_weight=torch.tensor([h[\u0026#39;obj_pw\u0026#39;]], device=device)) iou = iou.detach().clamp(0).type(tobj.dtype) if self.sort_obj_iou: j = iou.argsort() b, a, gj, gi, iou = b[j], a[j], gj[j], gi[j], iou[j] if self.gr \u0026lt; 1: # default 1.0 iou = (1.0 - self.gr) + self.gr * iou tobj[b, a, gj, gi] = iou # iou ratio obji = self.BCEobj(pi[..., 4], tobj) lobj += obji * self.balance[i] # obj loss Classification Loss\nt: (detection 갯수, class 갯수) 1 2 3 4 5 6 # Classification # BCEcls = nn.BCEWithLogitsLoss(pos_weight=torch.tensor([h[\u0026#39;cls_pw\u0026#39;]], device=device)) if self.nc \u0026gt; 1: # cls loss (only if multiple classes) t = torch.full_like(pcls, self.cn, device=self.device) # targets t[range(n), tcls[i]] = self.cp lcls += self.BCEcls(pcls, t) # BCE Total Loss\n$Loss=\\lambda_{box} L_{box} + \\lambda_{obj} L_{obj} + \\lambda_{cls} L_{cls}$ 1 2 3 4 5 6 lbox *= self.hyp[\u0026#39;box\u0026#39;] lobj *= self.hyp[\u0026#39;obj\u0026#39;] lcls *= self.hyp[\u0026#39;cls\u0026#39;] bs = tobj.shape[0] # batch size return (lbox + lobj + lcls) * bs, torch.cat((lbox, lobj, lcls)).detach() ","date":"2023-04-11T00:20:00+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov5_loss/","title":"YOLOv5 Loss"},{"content":"본 포스트에서는 YOLOv5의 Validation에 대해 살펴보겠습니다.\n목차 Validation Non-Maximum Suppression Profile Prediction Matrix AP, mAP 계산 Validation 학습 시 한 epoch 학습이 끝날 때마다 validate를 하여 해당 epoch 학습에 대한 평가를 하게 됩니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 if RANK in {-1, 0}: # mAP callbacks.run(\u0026#39;on_train_epoch_end\u0026#39;, epoch=epoch) ema.update_attr(model, include=[\u0026#39;yaml\u0026#39;, \u0026#39;nc\u0026#39;, \u0026#39;hyp\u0026#39;, \u0026#39;names\u0026#39;, \u0026#39;stride\u0026#39;, \u0026#39;class_weights\u0026#39;]) final_epoch = (epoch + 1 == epochs) or stopper.possible_stop if not noval or final_epoch: # Calculate mAP results, maps, _ = validate.run(data_dict, batch_size=batch_size // WORLD_SIZE * 2, imgsz=imgsz, half=amp, model=ema.ema, single_cls=single_cls, dataloader=val_loader, save_dir=save_dir, plots=False, callbacks=callbacks, compute_loss=compute_loss) muti-gpu 학습일 경우 validate은 gpu 0에서만 하게 됩니다. 위에서 명시해 주지 않은 conf_thres, iou_thres, max_det는 default로 conf_thres=0.001, iou_thres=0.6, max_det=300를 갖게 되고, 후에 Non-Maximum Suppression(NMS)에서 사용됩니다. Non-Maximum Suppression 각 validation data에 대해 inference를 한 뒤, prediction 결과에 Non-Maximum Suppression(NMS)를 적용합니다. NMS는 겹쳐 있는 여러 개의 bounding box에서 중복을 제거하고 하나를 선택하는 방법입니다. bounding box의 confidence score와 box 사이의 IoU를 고려하여 제거 후 남을 box를 선택하게 됩니다. 아래는 validate할 때 NMS 호출 코드입니다. 1 2 3 4 5 6 7 8 with dt[2]: preds = non_max_suppression(preds, conf_thres, iou_thres, labels=lb, multi_label=True, agnostic=single_cls, max_det=max_det) parameter로 사용되는 conf_thres, iou_thres, max_det는 호출되는 위치에 따라 다른 값이 사용됩니다. val.py에서 호출 conf_thres=0.001: confidence score가 0.001보다 작은 detection 결과는 모두 삭제합니다. iou_thres=0.6: IoU가 0.6 이상이 되는 box들에 대해 confidence score 기준으로 하나의 box를 선택하게 됩니다. max_det=300: 남은 box 중 confidence score가 높은 순으로 300개를 잘라서 반환합니다. detect.py에서 호출 conf_thres=0.25, iou_thres=0.45, max_det=1000가 사용됩니다. Profile val.py에서 non_max_suppression를 호출 할 때 with dt[2]로 감싸서 호출을 해 주게 되는데, 이 dt는 바로 Profile 클래스 객체입니다. pre-process, inference, NMS에 걸린 시간을 기록하기 위해 validation이 시작되기 전 아래와 같이 Profile 객체를 만들어줍니다.\n1 dt = Profile(), Profile(), Profile() # profiling times Profile 클래스는 contextlib.ContextDecorator를 상속받습니다. contextlib.ContextDecorator를 상속받은 child 클래스는 __enter__ 에서 with에 들어올 때 수행할 동작을, __exit__ 에서 with에서 나갈 때 수행할 동작을 정의할 수 있습니다. Profile에서는 들어올 때 시간을 체크하고 나갈 때 한 번 더 시간을 체크하여, with 안에서 수행한 전체 시간을 self.t에 저장합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Profile(contextlib.ContextDecorator): # YOLOv5 Profile class. Usage: @Profile() decorator or \u0026#39;with Profile():\u0026#39; context manager def __init__(self, t=0.0): self.t = t self.cuda = torch.cuda.is_available() def __enter__(self): self.start = self.time() return self def __exit__(self, type, value, traceback): self.dt = self.time() - self.start # delta-time self.t += self.dt # accumulate dt def time(self): if self.cuda: torch.cuda.synchronize() return time.time() validation이 학습 중 호출 된 것이 아닐 경우, validation 후에 아래와 같이 평균 수행 시간을 print합니다.\n1 2 3 4 5 # Print speeds t = tuple(x.t / seen * 1E3 for x in dt) # speeds per image if not training: shape = (batch_size, 3, imgsz, imgsz) LOGGER.info(f\u0026#39;Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {shape}\u0026#39; % t) Prediction Matrix NMS를 마친 결과와 label, 계산하고자 하는 IoU 기준으로 process_batch를 통해 각 detection마다 물체 탐지 여부를 표시하는 Prediction Matrix를 만들어줍니다. 1 correct = process_batch(predn, labelsn, iouv) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def process_batch(detections, labels, iouv): \u0026#34;\u0026#34;\u0026#34; Return correct prediction matrix Arguments: detections (array[N, 6]), x1, y1, x2, y2, conf, class labels (array[M, 5]), class, x1, y1, x2, y2 Returns: correct (array[N, 10]), for 10 IoU levels \u0026#34;\u0026#34;\u0026#34; correct = np.zeros((detections.shape[0], iouv.shape[0])).astype(bool) iou = box_iou(labels[:, 1:], detections[:, :4]) correct_class = labels[:, 0:1] == detections[:, 5] for i in range(len(iouv)): x = torch.where((iou \u0026gt;= iouv[i]) \u0026amp; correct_class) # IoU \u0026gt; threshold and classes match if x[0].shape[0]: matches = torch.cat((torch.stack(x, 1), iou[x[0], x[1]][:, None]), 1).cpu().numpy() # [label, detect, iou] if x[0].shape[0] \u0026gt; 1: matches = matches[matches[:, 2].argsort()[::-1]] matches = matches[np.unique(matches[:, 1], return_index=True)[1]] # matches = matches[matches[:, 2].argsort()[::-1]] matches = matches[np.unique(matches[:, 0], return_index=True)[1]] correct[matches[:, 1].astype(int), i] = True return torch.tensor(correct, dtype=torch.bool, device=iouv.device) iouv는 기준이 되는 IOU threshold 리스트입니다.\n0.5~0.95 사이의 IoU threshold를 사용합니다. tensor([0.50000, 0.55000, 0.60000, 0.65000, 0.70000, 0.75000, 0.80000, 0.85000, 0.90000, 0.95000], device=\u0026lsquo;cuda:0\u0026rsquo;) iou\n실제 GT인 labels와 NMS 마친 결과인 detections 사이의 IoU를 구합니다. labels가 5개, detections가 300개라면 iou의 shape은 (5, 300)이 됩니다. matches\ndetection 결과 중, IoU가 threshold보다 크고, class가 match하는 결과를 뽑습니다. IoU가 큰 순으로 정렬합니다. np.unique를 통해 label, detection결과가 중복된 것을 모두 제거해줍니다. shape은 (matches갯수, 3)인데 여기서 3은 차례로 label index, detections index, IoU입니다. 예를 들면 아래는 IoU threshold와 class로 필터링한 결과입니다. 1 2 3 4 [[ 1, 0, 0.51507], [ 1, 3, 0.78271], [ 1, 11, 0.51642], [ 1, 12, 0.54807]] 아래는 중복까지 제거한 결과입니다. 1 [[ 1, 0, 0.51507]] correct\n각 detections에 대해 10개의 IoU threshold 기준을 적용했을 때 object를 찾았는지 여부입니다. detections가 300개일 때, shape은 (300, 10)입니다. matches에서 찾은 detections에 True를 할당하므로, True는 해당 detection 결과와 실제 label의 IoU가 threshold보다 높고, class도 일치함을 의미합니다. 전체 이미지에 대해 process_batch한 결과를 stats에 저장합니다.\nAP, mAP 계산 ap_per_class를 통해 precision, recall, ap를 계산합니다. 1 tp, fp, p, r, f1, ap, ap_class = ap_per_class(*stats, plot=plots, save_dir=save_dir, names=names) 클래스별로 아래 식을 이용하여 10개의 IoU threshold에 대해 Precision과 Recall을 계산합니다.\n$Precision = \\frac{TP}{TP+FP} = \\frac{TP}{detection 갯수}$ $Recall = \\frac{TP}{TP+FN} = \\frac{TP}{GT 갯수}$ 위의 process_batch를 계산할 때 np.unique를 통해 중복을 걸러주었기 때문에, Precision과 Recall은 모두 최대 1을 가지게 됩니다. x 축이 Recall, y축이 Precision인 좌표평면에 각 detection에 대한 결과를 점으로 표시해 줍니다. 이 점을 모두 연결한 그래프를 Precision-Recall Curve라고 합니다.\n아래 그림에서 알파벳은 각 이미지를 의미합니다. 출처: https://github.com/rafaelpadilla/Object-Detection-Metrics\n아래 그림과 같이 전체 Recall 범위를 일정하게 나눈 뒤, 각 구역마다 Inpterpolated Precision을 구해줍니다. 아래 예시에서는 11개 구역으로 나누었는데 YOLOv5에서는 1000개로 나눕니다. 출처: https://github.com/rafaelpadilla/Object-Detection-Metrics\nInterpolated Precision을 좌표에 그려 아래와 같이 새로운 Precision-Recall Curve를 그려줍니다. 출처: https://github.com/rafaelpadilla/Object-Detection-Metrics\n새로운 Precision-Recall Curve의 아래 면적이(Area Uner Curve, AUC) AP값이 됩니다. 출처: https://github.com/rafaelpadilla/Object-Detection-Metrics\n위와 같은 방법으로 ap_per_class를 통해 클래스별 AP를 구한 다음, AP 값의 평균을 구해 Object Detection 성능 평가 지표로 사용하는데, 이를 Mean Average Precision(mAP)라고 합니다.\n","date":"2023-03-29T00:20:00+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov5_val/","title":"YOLOv5 Validation"},{"content":"본 포스트에서는 YOLOv5에서 사용하는 augmentation 종류에 대해 알아보겠습니다.\n목차 Mosaic Mixup Copy-Paste Random Perspective Albumentation, HSV, 상하좌우 반전 Mosaic hyperparameter 파일에 있는 mosaic 사용 확률로 샘플링을 하여 mosaic 사용 여부를 결정합니다. mosaic을 사용하지 않으면, 이미지가 정 가운데 들어가고 나머지가 여백으로 채워진 640×640이미지가 만들어집니다. 1 2 3 4 5 6 7 8 9 10 11 12 mosaic = self.mosaic and random.random() \u0026lt; hyp[\u0026#39;mosaic\u0026#39;] if mosaic: # Load mosaic img, labels = self.load_mosaic(index) ... else: # Load image img, (h0, w0), (h, w) = self.load_image(index) # Letterbox shape = self.batch_shapes[self.batch[index]] if self.rect else self.img_size # final letterboxed shape img, ratio, pad = letterbox(img, shape, auto=False, scaleup=self.augment) 이미지 3개를 랜덤으로 선택하여 총 4개의 이미지를 random crop 후 붙여 넣습니다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def load_mosaic(self, index): # YOLOv5 4-mosaic loader. Loads 1 image + 3 random images into a 4-image mosaic labels4, segments4 = [], [] s = self.img_size yc, xc = (int(random.uniform(-x, 2 * s + x)) for x in self.mosaic_border) # mosaic center x, y indices = [index] + random.choices(self.indices, k=3) # 3 additional image indices random.shuffle(indices) for i, index in enumerate(indices): # Load image img, _, (h, w) = self.load_image(index) # place img in img4 if i == 0: # top left img4 = np.full((s * 2, s * 2, img.shape[2]), 114, dtype=np.uint8) # base image with 4 tiles x1a, y1a, x2a, y2a = max(xc - w, 0), max(yc - h, 0), xc, yc # xmin, ymin, xmax, ymax (large image) x1b, y1b, x2b, y2b = w - (x2a - x1a), h - (y2a - y1a), w, h # xmin, ymin, xmax, ymax (small image) elif i == 1: # top right x1a, y1a, x2a, y2a = xc, max(yc - h, 0), min(xc + w, s * 2), yc x1b, y1b, x2b, y2b = 0, h - (y2a - y1a), min(w, x2a - x1a), h elif i == 2: # bottom left x1a, y1a, x2a, y2a = max(xc - w, 0), yc, xc, min(s * 2, yc + h) x1b, y1b, x2b, y2b = w - (x2a - x1a), 0, w, min(y2a - y1a, h) elif i == 3: # bottom right x1a, y1a, x2a, y2a = xc, yc, min(xc + w, s * 2), min(s * 2, yc + h) x1b, y1b, x2b, y2b = 0, 0, min(w, x2a - x1a), min(y2a - y1a, h) img4[y1a:y2a, x1a:x2a] = img[y1b:y2b, x1b:x2b] # img4[ymin:ymax, xmin:xmax] padw = x1a - x1b padh = y1a - y1b Mixup mixup: BEYOND EMPIRICAL RISK MINIMIZATION\nMixup은 학습 데이터에서 랜덤으로 뽑은 feature-target 벡터 $ (x_i, y_i) $, $ (x_j, y_j) $가 있을 때, 가상 feature-target 벡터 $ (\\tilde x, \\tilde y) $를 다음과 같이 구합니다.\n이 때, λ는 베타 분포에서 샘플링합니다. $$ \\tilde x = \\lambda x_i + (1 - \\lambda) x_j $$ $$ \\tilde y = \\lambda y_i + (1 - \\lambda) y_j $$\n아래는 λ=0.5로 mixup한 이미지입니다. yolov5에선 LoadImagesAndLabels 클래스의 __getitem__ 함수에서 아래와 같이 사용됩니다.\n1 2 3 # MixUp augmentation if random.random() \u0026lt; hyp[\u0026#39;mixup\u0026#39;]: img, labels = mixup(img, labels, *self.load_mosaic(random.randint(0, self.n - 1))) yolov5에서 mixup 구현한 코드입니다.\n1 2 3 4 5 6 def mixup(im, labels, im2, labels2): # Applies MixUp augmentation https://arxiv.org/pdf/1710.09412.pdf r = np.random.beta(32.0, 32.0) # mixup ratio, alpha=beta=32.0 im = (im * r + im2 * (1 - r)).astype(np.uint8) labels = np.concatenate((labels, labels2), 0) return im, labels Copy-Paste 랜덤하게 선택한 두 이미지에 random scale, jittering, random horizontal flipping을 적용합니다. 한 이미지에서 random하게 segmentation object를 선택한 뒤, 다른 이미지에 붙여 넣습니다. 출처: Ghiasi, Golnaz, et al. \u0026ldquo;Simple copy-paste is a strong data augmentation method for instance segmentation.\u0026rdquo; Proceedings of the IEEE/CVF conference on computer vision and pattern recognition. 2021, Figure2\nyolov5에선 load_mosaic 함수에서 mosiac을 만든 뒤 아래와 같이 사용됩니다. 여기서 img4는 mosaic 이미지, labels4, segments4는 mosaic 이미지 안에 있는 label 정보, segmentation 정보입니다. 1 img4, labels4, segments4 = copy_paste(img4, labels4, segments4, p=self.hyp[\u0026#39;copy_paste\u0026#39;]) yolov5에서 Copy-Paste 구현한 코드입니다. random scale과 jitter는 다른 곳에서 적용하기 때문에 아래 코드에는 빠져 있습니다. 또한, segmentation 정보가 없으면 Copy-Paste를 적용하지 않습니다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def copy_paste(im, labels, segments, p=0.5): # Implement Copy-Paste augmentation https://arxiv.org/abs/2012.07177, labels as nx5 np.array(cls, xyxy) n = len(segments) if p and n: h, w, c = im.shape # height, width, channels im_new = np.zeros(im.shape, np.uint8) for j in random.sample(range(n), k=round(p * n)): l, s = labels[j], segments[j] box = w - l[3], l[2], w - l[1], l[4] ioa = bbox_ioa(box, labels[:, 1:5]) # intersection over area if (ioa \u0026lt; 0.30).all(): # allow 30% obscuration of existing labels labels = np.concatenate((labels, [[l[0], *box]]), 0) segments.append(np.concatenate((w - s[:, 0:1], s[:, 1:2]), 1)) cv2.drawContours(im_new, [segments[j].astype(np.int32)], -1, (1, 1, 1), cv2.FILLED) result = cv2.flip(im, 1) # augment segments (flip left-right) i = cv2.flip(im_new, 1).astype(bool) im[i] = result[i] # cv2.imwrite(\u0026#39;debug.jpg\u0026#39;, im) # debug return im, labels, segments Random Perspective load_mosaic 함수에서 아래 코드를 통해 적용해줍니다. 1 2 3 4 5 6 7 8 9 img4, labels4 = random_perspective(img4, labels4, segments4, degrees=self.hyp[\u0026#39;degrees\u0026#39;], translate=self.hyp[\u0026#39;translate\u0026#39;], scale=self.hyp[\u0026#39;scale\u0026#39;], shear=self.hyp[\u0026#39;shear\u0026#39;], perspective=self.hyp[\u0026#39;perspective\u0026#39;], border=self.mosaic_border) # border to remove 아래는 구현의 일부입니다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Center C = np.eye(3) C[0, 2] = -im.shape[1] / 2 # x translation (pixels) C[1, 2] = -im.shape[0] / 2 # y translation (pixels) # Perspective P = np.eye(3) P[2, 0] = random.uniform(-perspective, perspective) # x perspective (about y) P[2, 1] = random.uniform(-perspective, perspective) # y perspective (about x) # Rotation and Scale R = np.eye(3) a = random.uniform(-degrees, degrees) # a += random.choice([-180, -90, 0, 90]) # add 90deg rotations to small rotations s = random.uniform(1 - scale, 1 + scale) # s = 2 ** random.uniform(-scale, scale) R[:2] = cv2.getRotationMatrix2D(angle=a, center=(0, 0), scale=s) # Shear S = np.eye(3) S[0, 1] = math.tan(random.uniform(-shear, shear) * math.pi / 180) # x shear (deg) S[1, 0] = math.tan(random.uniform(-shear, shear) * math.pi / 180) # y shear (deg) # Translation T = np.eye(3) T[0, 2] = random.uniform(0.5 - translate, 0.5 + translate) * width # x translation (pixels) T[1, 2] = random.uniform(0.5 - translate, 0.5 + translate) * height # y translation (pixels) # Combined rotation matrix M = T @ S @ R @ P @ C # order of operations (right to left) is IMPORTANT if (border[0] != 0) or (border[1] != 0) or (M != np.eye(3)).any(): # image changed if perspective: im = cv2.warpPerspective(im, M, dsize=(width, height), borderValue=(114, 114, 114)) else: # affine im = cv2.warpAffine(im, M[:2], dsize=(width, height), borderValue=(114, 114, 114)) Albumentation, HSV, 상하좌우 반전 augment parameter가 True로 설정이 되어 있으면 albumentation, HSV 색 조정, 상하좌우 반전이 적용됩니다.\nalbumentations albumentations은 이미지 augmentation을 해 주는 python 라이브러리입니다. LoadImagesAndLabels 클래스 객체가 만들어질 때 __init __ 에서 아래와 같이 선언이 된 후 사용됩니다. 1 self.albumentations = Albumentations(size=img_size) if augment else None albumentations가 설치되어 있는 경우에만 적용됩니다. albumentations는 requirements.txt에 comment 처리 되어있습니다. 기본으로는 RandomResizedCrop, Blur, MedianBlur, ToGray, CLAHE를 적용하고 있습니다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 try: import albumentations as A check_version(A.__version__, \u0026#39;1.0.3\u0026#39;, hard=True) # version requirement T = [ A.RandomResizedCrop(height=size, width=size, scale=(0.8, 1.0), ratio=(0.9, 1.11), p=0.0), A.Blur(p=0.01), A.MedianBlur(p=0.01), A.ToGray(p=0.01), A.CLAHE(p=0.01), A.RandomBrightnessContrast(p=0.0), A.RandomGamma(p=0.0), A.ImageCompression(quality_lower=75, p=0.0)] # transforms self.transform = A.Compose(T, bbox_params=A.BboxParams(format=\u0026#39;yolo\u0026#39;, label_fields=[\u0026#39;class_labels\u0026#39;])) LOGGER.info(prefix + \u0026#39;, \u0026#39;.join(f\u0026#39;{x}\u0026#39;.replace(\u0026#39;always_apply=False, \u0026#39;, \u0026#39;\u0026#39;) for x in T if x.p)) except ImportError: # package not installed, skip Hue(색상), Saturation(채도), Value(명도) 조정 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def augment_hsv(im, hgain=0.5, sgain=0.5, vgain=0.5): # HSV color-space augmentation if hgain or sgain or vgain: r = np.random.uniform(-1, 1, 3) * [hgain, sgain, vgain] + 1 # random gains hue, sat, val = cv2.split(cv2.cvtColor(im, cv2.COLOR_BGR2HSV)) dtype = im.dtype # uint8 x = np.arange(0, 256, dtype=r.dtype) lut_hue = ((x * r[0]) % 180).astype(dtype) lut_sat = np.clip(x * r[1], 0, 255).astype(dtype) lut_val = np.clip(x * r[2], 0, 255).astype(dtype) im_hsv = cv2.merge((cv2.LUT(hue, lut_hue), cv2.LUT(sat, lut_sat), cv2.LUT(val, lut_val))) cv2.cvtColor(im_hsv, cv2.COLOR_HSV2BGR, dst=im) # no return needed 상하좌우 반전 1 2 3 4 5 6 7 8 9 10 11 # Flip up-down if random.random() \u0026lt; hyp[\u0026#39;flipud\u0026#39;]: img = np.flipud(img) if nl: labels[:, 2] = 1 - labels[:, 2] # Flip left-right if random.random() \u0026lt; hyp[\u0026#39;fliplr\u0026#39;]: img = np.fliplr(img) if nl: labels[:, 1] = 1 - labels[:, 1] ","date":"2023-03-16T00:20:00+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov5_augmentation/","title":"YOLOv5 Augmentation"},{"content":"본 포스트에서는 YOLOv5가 hyperparameter를 선정하는 방법인 evolve에 대해 살펴보도록 하겠습니다.\n목차 Evolve Fitness Meta 부모 선정 Mutation Hyperparameter 저장 Evolve YOLOv5는 Genetic Algorithm을 사용하여 hyperparameter를 optimize하는데, 이를 hyperparameter evolution이라고 합니다. train.py에 --evovle argument를 주어 수행합니다. 아래는 YOLOv5 github에 있는 evolve 사용 예시입니다.\n1 2 3 4 5 6 7 8 9 # Single-GPU python train.py --epochs 10 --data coco128.yaml --weights yolov5s.pt --cache --evolve # Multi-GPU for i in 0 1 2 3 4 5 6 7; do sleep $(expr 30 \\* $i) \u0026amp;\u0026amp; # 30-second delay (optional) echo \u0026#39;Starting GPU \u0026#39;$i\u0026#39;...\u0026#39; \u0026amp;\u0026amp; nohup python train.py --epochs 10 --data coco128.yaml --weights yolov5s.pt --cache --device $i --evolve \u0026gt; evolve_gpu_$i.log \u0026amp; done --evolve 뒤에 generation 횟수를 명시해 주지 않는다면 default로는 300번 hyperparameter를 generation합니다. 300개의 hyperparameter에 대해 10 epoch씩 학습을 한 뒤 가장 fintness가 높은 hyperparameter를 알려줍니다. Fitness 1 2 3 4 def fitness(x): # Model fitness as a weighted combination of metrics w = [0.0, 0.0, 0.1, 0.9] # weights for [P, R, mAP@0.5, mAP@0.5:0.95] return (x[:, :4] * w).sum(1) 위는 default로 사용되는 fitness 함수입니다. x는 차례로 precision, recall, mAP@0.5, mAP@0.5:0.95 값입니다. 위의 fitness 함수에선 precision과 recall은 사용하지 않고, mAP@0.5 10%, mAP@0.5:0.95 90%로 fitness 점수를 매깁니다. 데이터나, 풀고자 하는 문제의 종류에 따라 Precision, recall, mAP 중 높아야 하는 항목이 다를 수 있습니다. 따라서, 위의 fitness를 그대로 사용하지 않고, 상황에 맞춰 수정하여 사용하는 것이 좋습니다. Meta Genetic Algorithm으로 hyperparameter를 선정하기 전, meta를 정의하여 mutation을 적용할 정도, 최솟값, 최댓값을 정의해 줍니다. 아래는 train.py에 기본으로 설정되어 있는 meta 값입니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # Hyperparameter evolution metadata (mutation scale 0-1, lower_limit, upper_limit) meta = { \u0026#39;lr0\u0026#39;: (1, 1e-5, 1e-1), # initial learning rate (SGD=1E-2, Adam=1E-3) \u0026#39;lrf\u0026#39;: (1, 0.01, 1.0), # final OneCycleLR learning rate (lr0 * lrf) \u0026#39;momentum\u0026#39;: (0.3, 0.6, 0.98), # SGD momentum/Adam beta1 \u0026#39;weight_decay\u0026#39;: (1, 0.0, 0.001), # optimizer weight decay \u0026#39;warmup_epochs\u0026#39;: (1, 0.0, 5.0), # warmup epochs (fractions ok) \u0026#39;warmup_momentum\u0026#39;: (1, 0.0, 0.95), # warmup initial momentum \u0026#39;warmup_bias_lr\u0026#39;: (1, 0.0, 0.2), # warmup initial bias lr \u0026#39;box\u0026#39;: (1, 0.02, 0.2), # box loss gain \u0026#39;cls\u0026#39;: (1, 0.2, 4.0), # cls loss gain \u0026#39;cls_pw\u0026#39;: (1, 0.5, 2.0), # cls BCELoss positive_weight \u0026#39;obj\u0026#39;: (1, 0.2, 4.0), # obj loss gain (scale with pixels) \u0026#39;obj_pw\u0026#39;: (1, 0.5, 2.0), # obj BCELoss positive_weight \u0026#39;iou_t\u0026#39;: (0, 0.1, 0.7), # IoU training threshold \u0026#39;anchor_t\u0026#39;: (1, 2.0, 8.0), # anchor-multiple threshold \u0026#39;anchors\u0026#39;: (2, 2.0, 10.0), # anchors per output grid (0 to ignore) \u0026#39;fl_gamma\u0026#39;: (0, 0.0, 2.0), # focal loss gamma (efficientDet default gamma=1.5) \u0026#39;hsv_h\u0026#39;: (1, 0.0, 0.1), # image HSV-Hue augmentation (fraction) \u0026#39;hsv_s\u0026#39;: (1, 0.0, 0.9), # image HSV-Saturation augmentation (fraction) \u0026#39;hsv_v\u0026#39;: (1, 0.0, 0.9), # image HSV-Value augmentation (fraction) \u0026#39;degrees\u0026#39;: (1, 0.0, 45.0), # image rotation (+/- deg) \u0026#39;translate\u0026#39;: (1, 0.0, 0.9), # image translation (+/- fraction) \u0026#39;scale\u0026#39;: (1, 0.0, 0.9), # image scale (+/- gain) \u0026#39;shear\u0026#39;: (1, 0.0, 10.0), # image shear (+/- deg) \u0026#39;perspective\u0026#39;: (0, 0.0, 0.001), # image perspective (+/- fraction), range 0-0.001 \u0026#39;flipud\u0026#39;: (1, 0.0, 1.0), # image flip up-down (probability) \u0026#39;fliplr\u0026#39;: (0, 0.0, 1.0), # image flip left-right (probability) \u0026#39;mosaic\u0026#39;: (1, 0.0, 1.0), # image mixup (probability) \u0026#39;mixup\u0026#39;: (1, 0.0, 1.0), # image mixup (probability) \u0026#39;copy_paste\u0026#39;: (1, 0.0, 1.0)} # segment copy-paste (probability) 부모 선정 1 2 3 4 5 6 7 8 9 10 11 # Select parent(s) parent = \u0026#39;single\u0026#39; # parent selection method: \u0026#39;single\u0026#39; or \u0026#39;weighted\u0026#39; x = np.loadtxt(evolve_csv, ndmin=2, delimiter=\u0026#39;,\u0026#39;, skiprows=1) n = min(5, len(x)) # number of previous results to consider x = x[np.argsort(-fitness(x))][:n] # top n mutations w = fitness(x) - fitness(x).min() + 1E-6 # weights (sum \u0026gt; 0) if parent == \u0026#39;single\u0026#39; or len(x) == 1: # x = x[random.randint(0, n - 1)] # random selection x = x[random.choices(range(n), weights=w)[0]] # weighted selection elif parent == \u0026#39;weighted\u0026#39;: x = (x * w.reshape(n, 1)).sum(0) / w.sum() # weighted combination fitness가 높은 순으로 5개의 부모를 선택합니다. 각 부모의 fitness를 확률로 사용합니다. single: 확률을 고려하여 부모 하나를 랜덥으로 뽑습니다. weighted: 5개 부모의 평균 값을 사용합니다. 기본으로는 single 방식을 사용합니다. Mutation 1 2 3 4 5 6 7 8 9 10 11 # Mutate mp, s = 0.8, 0.2 # mutation probability, sigma npr = np.random npr.seed(int(time.time())) g = np.array([meta[k][0] for k in hyp.keys()]) # gains 0-1 ng = len(meta) v = np.ones(ng) while all(v == 1): # mutate until a change occurs (prevent duplicates) v = (g * (npr.random(ng) \u0026lt; mp) * npr.randn(ng) * npr.random() * s + 1).clip(0.3, 3.0) for i, k in enumerate(hyp.keys()): # plt.hist(v.ravel(), 300) hyp[k] = float(x[i + 7] * v[i]) # mutate g: mutation을 적용할 정도입니다. randn 함수는 평균 0, 분산 1인 normal distribution을 만듭니다. npr.randn(ng)에 s를 곱한 후 1을 더해주면, 평균이 1, 분산이 s인 normal distribution이 만들어집니다. (npr.random(ng) \u0026lt; mp): mutation 적용 여부를 mp의 확률로 결정합니다. 모든 값이 1이던 v array가 랜덤 샘플링을 통해 일부 값이 변하고, 이를 부모 hyperparameter에 곱해줍니다. 아래는 v값의 예시입니다. [1.003, 1.0048, 1.028, 0.8988, 1, 1, 0.99587, 1.032, 0.99873, 1, 1, 0.92108, 1, 0.99281, 1, 1.0333, 0.91948, 0.9941, 1.0725, 0.95916, 1, 1, 1, 1.0628, 1, 1.0312, 0.95677, 1] mutation 후 meta에서 정의한 최소, 최댓값으로 걸러줍니다.\n1 2 3 4 5 # Constrain to limits for k, v in meta.items(): hyp[k] = max(hyp[k], v[1]) # lower limit hyp[k] = min(hyp[k], v[2]) # upper limit hyp[k] = round(hyp[k], 5) # significant digits Hyperparameter 저장 1 2 3 4 5 6 7 # Train mutation results = train(hyp.copy(), opt, device, callbacks) callbacks = Callbacks() # Write mutation results keys = (\u0026#39;metrics/precision\u0026#39;, \u0026#39;metrics/recall\u0026#39;, \u0026#39;metrics/mAP_0.5\u0026#39;, \u0026#39;metrics/mAP_0.5:0.95\u0026#39;, \u0026#39;val/box_loss\u0026#39;, \u0026#39;val/obj_loss\u0026#39;, \u0026#39;val/cls_loss\u0026#39;) print_mutation(keys, results, hyp.copy(), save_dir, opt.bucket) 학습 후, print_mutation을 통해 학습 결과 및 가장 결과가 좋은 hyperparameter를 저장합니다. 아래는 저장된 hyperparameter의 예시입니다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # YOLOv5 Hyperparameter Evolution Results # Best generation: 118 # Last generation: 164 # metrics/precision, metrics/recall, metrics/mAP_0.5, metrics/mAP_0.5:0.95, val/box_loss, val/obj_loss, val/cls_loss # 0.79541, 0.81562, 0.82932, 0.52318, 0.017451, 0.046121, 0.0056865 lr0: 0.01498 lrf: 0.01813 momentum: 0.89668 weight_decay: 0.0007 warmup_epochs: 2.9996 warmup_momentum: 0.95 warmup_bias_lr: 0.09796 box: 0.03177 cls: 0.72138 cls_pw: 1.0919 obj: 1.0486 obj_pw: 1.006 iou_t: 0.2 anchor_t: 2.201 fl_gamma: 0.0 hsv_h: 0.01734 hsv_s: 0.55193 hsv_v: 0.46602 degrees: 0.0 translate: 0.08528 scale: 0.38912 shear: 0.0 perspective: 0.0 flipud: 0.0 fliplr: 0.5 mosaic: 0.99787 mixup: 0.0 copy_paste: 0.0 anchors: 2.0 ","date":"2023-02-28T00:20:00+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov5_evolve/","title":"YOLOv5 Evolve"},{"content":"본 포스트에서는 YOLOv5에서 anchor를 선정하는 방법에 대해서 알아보겠습니다.\n목차 동기 Genetic Algorithm YOLOv5에서 사용된 GA Autoanchor 동기 YOLOv5는 Glenn Jocher가 Github을 통해 발표한 모델입니다. 그는 Yolov5 이전에 Pytorch 버전의 YOLOv3 코드를 작성해서 Github에 공개 한 적이 있습니다. 이 때, 많은 사람들이 custom data set을 학습하며 올린 이슈를 보고 그는 사람들이 학습하고자 하는 dataset의 bounding box 가로 세로 비율이 COCO dataset bounding box의 가로 세로 비율과 많이 다르다는 사실을 발견하게 됩니다. 이 문제를 해결하기 위해, 그는 그 당시에 anchor box를 선정할 때 많이 쓰이던 k-means에 genetic algorithm을 추가적으로 접목시키고, 이 모든 과정을 자동으로 수행해주는 autoanchor를 YOLOv5에 소개합니다. 이에 관한 내용은 아래 링크의 인터뷰에서 더 자세히 확인하실 수 있습니다.\nhttps://www.youtube.com/watch?v=O4jOqVqyAo8\nGenetic Algorithm Genetic Algorithm(GA)는 진화 과정에서 착안한 문제 해결 방법입니다. GA를 이해하기 위해서 필요한 용어에 대해 먼저 살펴보겠습니다.\nPopulation: 주어진 문제에 대한 해결 방법 집합 Chromosome: 염색체. 유전자로 이루어져 있습니다. 하나의 문제 해결 방법을 의미합니다. Crossover: 부모의 유전자를 사용하여 자손이 생성됩니다. Mutation: 유전자 일부가 변화합니다. 적합도: 해당 문제에 대해 염색체에 해당하는 해결 방식이 얼마나 적합한지를 의미합니다. GA는 아래의 순서로 수행이 됩니다.\nYOLOv5에서 사용된 GA yolo에서는 위에서 살펴본 GA 과정이 아래와 같이 변형되어 진행됩니다.\nYOLOv5의 population은 bounding box의 가로 세로가 됩니다. 그리고 GA를 통해 가장 적합한 anchor box의 가로 세로 크기를 구하려고 합니다. 부모를 선택할 때에는 k-means를 사용합니다. k개의 centroid(가로, 세로)를 구한 뒤, 각 centroid가 단독 부모가 됩니다. k개의 단독 부모에 대해 crossover는 하지 않고 generation 하고자 하는 수만큼 mutation만 합니다. default로는 각 k개 부모마다 1000개의 (가로, 세로)를 mutation합니다. 재생산한 1000개 (w, h) 사이의 적합도를 계산해서 가장 높은 하나를 선택합니다. 결국 k개의 (w, h)가 선택되는데, 이게 YOLOv5에서 사용하는 anchor box가 됩니다. Autoanchor dataloader를 만든 후 학습에 들어가기 전, 현재 anchor가 현재 데이터에 적합한 anchor인지 check_anchors를 통해 확인합니다. 이 함수 내부에서 Autoanchor가 수행됩니다.\n1 2 3 if not resume: if not opt.noautoanchor: check_anchors(dataset, model=model, thr=hyp[\u0026#39;anchor_t\u0026#39;], imgsz=imgsz) # run AutoAnchor 현재 anchor가 적합한 anchor인지 판별한는 데에는 아래의 metric이 사용됩니다. 여기서 wh는 전체 bounding box의 [가로, 세로] array이고, k는 현재 anchor의 [가로, 세로] array입니다.\n1 2 3 4 5 6 7 def metric(k): # compute metric r = wh[:, None] / k[None] x = torch.min(r, 1 / r).min(2)[0] # ratio metric best = x.max(1)[0] # best_x aat = (x \u0026gt; 1 / thr).float().sum(1).mean() # anchors above threshold bpr = (best \u0026gt; 1 / thr).float().mean() # best possible recall return bpr, aat torch.min(r, 1 / r): bounding box의 가로, 세로를 각 anchor box의 가로 세로로 나누어 비율을 구합니다. (bbox 갯수, anchor 갯수, 2)의 shape을 가집니다.\nx = torch.min(r, 1 / r).min(2)[0]: bounding box의 anchor box에 대한 가로 세로 비율 중 더 작은 것을 선택합니다. 즉 bounding box마다 각 anchor에 대한 비율을 하나씩 갖게 됩니다. (bbox갯수, anchor 갯수)의 shape을 가집니다.\nbest = x.max(1)[0]: bounding box는 가장 비율이 높은 anchor 하나를 선정합니다. best는 가장 비율이 높은 anchor와의 비율 값 array입니다. (bbox 갯수)의 shape을 가집니다.\naat = (x \u0026gt; 1 / thr).float().sum(1).mean()\nbpr = (best \u0026gt; 1 / thr).float().mean()\nbpr이 0.98보다 작으면 k_mean_ahcnors 함수를 통해 새로운 anchor를 만들어줍니다.\n1 2 3 4 5 6 if bpr \u0026gt; 0.98: # threshold to recompute LOGGER.info(f\u0026#39;{s}Current anchors are a good fit to dataset ✅\u0026#39;) else: LOGGER.info(f\u0026#39;{s}Anchors are a poor fit to dataset ⚠️, attempting to improve...\u0026#39;) na = m.anchors.numel() // 2 # number of anchors anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False) kmean_anchors에서는 먼저 k-means로 bounding box에서 k개의 centroid를 구해줍니다.\n1 2 3 from scipy.cluster.vq import kmeans s = wh.std(0) # sigmas for whitening k = kmeans(wh / s, n, iter=30)[0] * s # points centroid를 구했으면 그 centroid를 사용해서 mutatation을 한 다음 anchor_fitness를 통해 적합도를 계산해 줍니다. 위에서 사용된 것과 동일하게 가로, 세로 비율을 고려한 동일한 metric이 사용됩니다.\n1 2 3 4 5 def metric(k, wh): # compute metrics r = wh[:, None] / k[None] x = torch.min(r, 1 / r).min(2)[0] # ratio metric # x = wh_iou(wh, torch.tensor(k)) # iou metric return x, x.max(1)[0] # x, best_x mutation은 gen갯수만큼 mutation을 해 주는데 default는 1000개입니다. 1000개의 mutation을 하고 그 중 가장 적합도가 높은 것을 anchor로 반환합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Evolve f, sh, mp, s = anchor_fitness(k), k.shape, 0.9, 0.1 # fitness, generations, mutation prob, sigma pbar = tqdm(range(gen), bar_format=TQDM_BAR_FORMAT) # progress bar for _ in pbar: v = np.ones(sh) while (v == 1).all(): # mutate until a change occurs (prevent duplicates) v = ((npr.random(sh) \u0026lt; mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0) kg = (k.copy() * v).clip(min=2.0) fg = anchor_fitness(kg) if fg \u0026gt; f: f, k = fg, kg.copy() pbar.desc = f\u0026#39;{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}\u0026#39; if verbose: print_results(k, verbose) return print_results(k).astype(np.float32) ","date":"2023-02-16T00:20:00+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov5_anchor/","title":"YOLOv5 anchor"},{"content":"본 포스트에서는 YOLOv5 리파지토리의 train.py 코드를 전체적으로 살펴보도록 하겠습니다.\n목차 Data parellel 학습 조건 프린트 및 저장 Logger torch_distributed_zero_first Dataloader Data parellel 학습 코드 중간 중간 RANK라는 variable이 나오는데, 이를 이해하기 위해선 data parellel의 몇 가지 용어들을 이해해야 합니다. 코드를 보기 전에 먼저 용어를 간단히 살펴보겠습니다.\ndata parellel: 모델 학습 방법 중 하나입니다. 모델 복사본 여러 개를 만들어, 각 복사된 모델에서 동시에 parellel하게 학습이 이루어집니다. 이 때 각 복사된 모델은 각기 다른 데이터를 학습하고, local gradients/sub-gradients를 계산한 뒤, synchronization 작업을 통해 복사본 전체의 gradients를 계산하게 됩니다. node: data parellel 학습을 할 때, 학습이 이루어지는 머신 혹은 서버입니다 각 node에서는 여러 개의 process를 만들어 모델을 복사한 뒤, 복사된 모델에서 학습이 진행됩니다. rank: node에 복사된 각 process의 id입니다. node가 여러 개 있을 때, rank는 local rank와 global rank로 나뉘게 되는데, local rank는 한 node 안에서의 id이고, global rank는 전체 node 안에 있는 모든 process에 id를 매긴 것입니다. world: 전체 node 안의 모든 process를 포함하는 그룹입니다. world 안에 있는 process 갯수를 world size라고 합니다. 보통 모델 복사본 하나가 GPU 하나를 사용하고, 따라서 process 하나를 만들기 때문에 world size는 주로 GPU 갯수인 경우가 많습니다. 하지만 경우에 따라 모델이 큰 경우에 모델 복사본 하나가 GPU 여러 개를 사용하는 경우도 있습니다. 출처: https://github.com/pytorch/examples/blob/main/distributed/ddp/README.md 위 그림은 두 개 노드에서 학습을 하는 data parellel application입니다. 위 모델은 모델 복사본 하나 당 GPU 두 개를 사용하여 학습하여, 각 node안의 GPU0, GPU1에서 LOCAL RANK0을 가진 process가, GPU2, GPU3에서 LOCAL RANK1을 가진 process가 학습을 진행하게 됩니다. GLOBAL RANK는 node에 상관 없이 전체 process에 대해 0~3까지 할당됩니다.\n학습 조건 프린트 및 저장 main 함수가 시작되면 아래와 같이 현재 args를 프린트하고, 학습에 필요한 것들을 체크하는 코드가 있습니다. 이 때 위에서 살펴본 RANK가 나오는데, RANK가 -1인 경우는 data parellel을 사용하지 않는 경우입니다. 하나의 process에서만 프린트하기 위해 아래와 같이 rank가 0일 경우에만 코드를 실행합니다. check_git_status는 현재 브랜치의 커밋 내역을 확인하여 pull 받을 커밋이 있다면 자동으로 git pull 해 주는 함수입니다. 개인적으로는 코드 관리 및 재현에 용이하게 하기 위해 아래와 같이 코멘트처리 한 뒤 필요할 때마다 수동으로 git pull해서 사용하고 있습니다.\n1 2 3 4 5 # main 함수 if RANK in {-1, 0}: print_args(vars(opt)) # check_git_status() check_requirements() 학습이 시작되면 아래에서 현재 학습에 사용하고 있는 하이퍼파라미터와 학습 관련된 세팅을 저장합니다. 각 파일은 runs/train/exp 폴더에 저장되어 학습이 종료 후 학습에 사용한 설정을 확인할 수 있습니다. exp 폴더는 학습을 새로 할 때마다 exp1 exp2와 같이 자동으로 숫자가 커지며 폴더가 새로 생성됩니다.\n1 2 3 4 # train 함수 if not evolve: yaml_save(save_dir / \u0026#39;hyp.yaml\u0026#39;, hyp) yaml_save(save_dir / \u0026#39;opt.yaml\u0026#39;, vars(opt)) Logger 1 2 3 4 5 6 if RANK in {-1, 0}: loggers = Loggers(save_dir, weights, opt, hyp, LOGGER) # loggers instance # Register actions for k in methods(loggers): callbacks.register_action(k, callback=getattr(loggers, k)) 로깅을 한 번만 하기 위해 rank가 0일 경우 Logger 객체를 만듭니다. 그런 다음 loggers의 함수를 각 함수의 이름으로 callback에 등록해 줍니다. 함수를 호출 할 때에는 함수 이름을 이용하여 아래와 같이 호출해줍니다.\n1 callbacks.run(\u0026#39;on_pretrain_routine_end\u0026#39;, labels, names) 예를 들면 위 코드는 학습을 위한 설정 후 실행됩니다. 위 코드가 실행되면 Loggers 클래스의 on_pretrain_routine_end 함수가 실행되어 레이블에 관한 정보를 이미지로 저장합니다.\ntorch_distributed_zero_first 첫 번째 rank가 먼저 수행되어야 하는 코드가 있을 때, yolov5에서는 torch_distributed_zero_first 함수를 만들어 이를 수행하고 있습니다.\n1 2 3 4 5 6 7 8 @contextmanager def torch_distributed_zero_first(local_rank: int): # Decorator to make all processes in distributed training wait for each local_master to do something if local_rank not in [-1, 0]: dist.barrier(device_ids=[local_rank]) yield if local_rank == 0: dist.barrier(device_ids=[0]) torch_distributed_zero_first 함수는 torch의 contextmanager decorator와 barrier 함수를 이용하여 정의되어 있습니다.\n@contextmanager와 함께 정의된 함수는 yield 전에 선언된 코드는 with 코드 블록이 실행되기 전에 수행이 되고, yield 후에 선언된 코드는 with 코드 블록이 실행된 후 수행이 됩니다. barrier 함수는 전체 그룹이 barrier 함수에 도달할 때까지 process를 block합니다. 위의 torch_distributed_zero_first에서는 rank0을 제외한 나머지 process는 yield 전에서 rank0를 기다리게 되고, rank0 혼자 yield를 만나 with 코드 블록을 수행합니다. 후에 rank0이 barrier를 만나게 되면 나머지 process들도 yield를 만나 with 코드 블록을 수행하게 됩니다. 이 과정을 통해 rank0가 항상 with 코드 블록을 다른 process보다 먼저 수행하게 됩니다. 1 2 with torch_distributed_zero_first(LOCAL_RANK): data_dict = data_dict or check_dataset(data) 위는 학습 코드에서 torch_distributed_zero_first가 사용된 예입니다. * rank0을 제외한 나머지 process는 rank0가 check_dataset(data)를 수행 후 barrier를 만날 때까지 기다립니다.\nrank0는 check_dataset를 수행하여 데이터가 없으면 다운받습니다. check_dataset 함수 수행이 끝난 후 rank0는 barrier 를 만납니다. 나머지 process들도 check_dataset를 수행하게 됩니다. 이 때, 데이터는 이미 rank0에서 다운받았기 때문에 다시 다운받지 않습니다. torch_distributed_zero_first 함수를 사용함으로써 다운로드를 한 번만 받게 됩니다. Optimizer \u0026amp; Learning rate schedule train을 시작할 때 optimizer argument를 주지 않는다면 default인 SGD가 사용됩니다. lr0, momentum, weight_decay는 학습 시작시 지정한 하이퍼파라미터에서 가져옵니다.\n1 optimizer = smart_optimizer(model, opt.optimizer, hyp[\u0026#39;lr0\u0026#39;], hyp[\u0026#39;momentum\u0026#39;], hyp[\u0026#39;weight_decay\u0026#39;]) Learning rate은 default로 Linear learning rate을 사용합니다. 아래와 같이 LambdaLR을 사용하여 구현되어 있습니다.\n1 2 3 4 5 if opt.cos_lr: lf = one_cycle(1, hyp[\u0026#39;lrf\u0026#39;], epochs) # cosine 1-\u0026gt;hyp[\u0026#39;lrf\u0026#39;] else: lf = lambda x: (1 - x / epochs) * (1.0 - hyp[\u0026#39;lrf\u0026#39;]) + hyp[\u0026#39;lrf\u0026#39;] # linear scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf) Dataloader 각 rank마다 dataloader가 생기므로, 전체 batch size를 WORLD_SIZE로 나눈 것이 새로운 batch size가 되어 dataloader를 만들게 됩니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 train_loader, dataset = create_dataloader(train_path, imgsz, batch_size // WORLD_SIZE, gs, single_cls, hyp=hyp, augment=True, cache=None if opt.cache == \u0026#39;val\u0026#39; else opt.cache, rect=opt.rect, rank=LOCAL_RANK, workers=workers, image_weights=opt.image_weights, quad=opt.quad, prefix=colorstr(\u0026#39;train: \u0026#39;), shuffle=True, seed=opt.seed) 현재 YOLOv5에서는 validation은 single-GPU만 지원하고 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 if RANK in {-1, 0}: val_loader = create_dataloader(val_path, imgsz, batch_size // WORLD_SIZE * 2, gs, single_cls, hyp=hyp, cache=None if noval else opt.cache, rect=True, rank=-1, workers=workers * 2, pad=0.5, prefix=colorstr(\u0026#39;val: \u0026#39;))[0] ","date":"2023-02-06T00:20:00+09:00","permalink":"https://kimberlykang.github.io/ko/p/yolov5_train/","title":"YOLOv5 학습"}]