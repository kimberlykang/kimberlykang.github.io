[{"content":"본 포스트에서는 2016년 CVPR에 발표된 논문 \u0026ldquo;You Only Look Once: Unified, Real-Time Object Detection\u0026quot;을 살펴보겠습니다.\nhttps://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Redmon_You_Only_Look_CVPR_2016_paper.pdf\n목차  개념 이해 Bounding Box Class Probability Output 네트워크 구조 학습 테스트  개념 이해 YOLO에서는 이미지에서 object를 찾을 때, grid를 사용합니다. 이를 간략하게 살펴보면\n 이미지를 S×S개의 grid로 나눕니다. 각 grid cell에서 B개의 bounding box의 좌표(x, y, w, h)와 그 bounding box의 confidence score(c)를 예측합니다. 각 grid cell마다 C개의 class probability를 예측합니다. confidence score과 class probability로 최종 score와 class를 결정하고, 이 때 score가 threshold보다 높은 bounding box가 최종 object detection의 결과가 됩니다.   위 이미지는 S=7, B=2일 때 하나의 grid에 대한 예측의 예시입니다. 각 grid cell마다 bounding box(x, y, w, h, c)를 두 세트씩 예측합니다. C=20일 때, 각 grid cell마다 20개의 class에 대한 class probability를 예측합니다.  지금까지 YOLO가 어떻게 object를 찾는지 대략적으로 살펴봤습니다. 아래에서는 각 예측값들이 어떻게 계산되고 어떤 의미를 갖는지 살펴보겠습니다.\nBounding Box bounding box는 (x, y, w, h, c)로 이루어져 있습니다.\n (x, y): bounding box 중심의 좌표.  각 grid cell마다 B개의 bounding box를 가진다는 의미는, 이 B개의 bounding box의 중심이 해당 grid cell 안에 있다는 의미입니다. box의 네 꼭지점은 bounding box 밖에 있어도 상관이 없습니다. grid cell 안에서 상대적으로 어느 위치에 있는지를 표시하며, 0~1 사이의 값을 가집니다.   (w, h): bounding box의 너비, 높이.  전체 이미지 너비, 높이에 대해 상대적인 값을 사용하며 0~1 사이의 값을 가집니다.   c: box가 object를 갖는 것에 대해 얼마나 확신하고, 그 box의 좌표가 얼마나 정확한 가에 대한 값입니다.  $ Pr(Object) * IOU^{truth}_{pred} $ 좌표가 얼마나 정확한지를 계산할 때에는 예측한 좌표와 Ground Truth(GT) 사이의 Intersection Over Union(IOU)를 계산합니다.    Class Probability  C: 각 grid cell이 object를 가지고 있을 때의 class probability입니다.  $ Pr(Class_i|Object) $ bounding box 갯수와 상관 없이 grid cell마다 한 세트의 class probability만 예측합니다.    Output  이미지를 S×S grid로 나누고, 각 grid마다 B개의 bounding box와 C개 class에 대한 class probability가 있다고 할 때, 최종 output tensor의 shape은 S×S×(B*5+C)가 됩니다. PASCAL VOC 실험 예를 들면, S=7, B=2, C=20입니다. 따라서 총 49개의 grid가 있고, 각 grid cell마다 30개의 예측값을 갖게 됩니다. 아래는 30개의 예측값 중 하나의 예시입니다.  [x, y, w, h, c, 배경일 확률, 비행기일 확률, \u0026hellip;, 모니터일 확률] [0.4, 0.3, 0.8, 0.7, 0.9, 0.003, 0.8, \u0026hellip; , 0.012]    네트워크 구조  GoogLeNet과 유사한 구조를 사용했습니다. 출처: Joseph Redmon, Santosh Divvala, Ross Girshick, Ali Farhadi, You Only Look Once: Unified, Real-Time Object Detection, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2016, pp.781, Figure 3  Loss   sum-squared error를 사용했습니다.\n  $ \\lambda_{coor} $, $ \\lambda_{noobj} $ 사용\n 대부분의 이미지는 object가 있는 grid cell보다 object가 없는 grid cell이 더 많습니다. 그래서 object가 없는 grid cell의 confidence score는 0에 가까워질 때의 gradient가 object가 있는 grid cell의 gradient보다 훨씬 커서 학습 초기에 모델이 diverge 하는 현상이 생길 수 있습니다. 이를 막기 위해, $ \\lambda_{coor}=5 $를 사용하여 bounding box 좌표 예측 loss는 증가시키고, $ \\lambda_{noobj}=0.5 $를 사용하여 object가 없는 box의 confidence 예측 loss는 감소시켰습니다.    $ \\sqrt w $, $ \\sqrt h $ 예측\n 큰 box는 편차가 조금 있어도 크게 상관 없지만 작은 box에는 큰 영향을 끼칩니다. 이 문제를 해결하기 위해 bounding box 너비와 높이 값에 루트를 씌워 줬습니다.    각 object에 가장 IOU가 높은 하나의 bounding box predictor만 할당했습니다.\n  Loss function\n$ \\lambda_{coor} \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{obj} [(x_i-\\hat x_i)^2 + (y_i-\\hat y_i)^2] $\n$ + \\lambda_{coor} \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{obj} [(\\sqrt{w_i} - \\sqrt{\\hat w_i})^2 + (\\sqrt{h_i} - \\sqrt{\\hat h_i})^2] $\n$ + \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{obj} (C_i-\\hat C_i)^2 $ $ + \\lambda_{noobj} \\displaystyle{\\sum_{i=0}^{s^2}} \\displaystyle{\\sum_{j=0}^{B}} \\mathbb 1_{ij}^{noobj} (C_i-\\hat C_i)^2 $\n$ + \\displaystyle{\\sum_{i=0}^{s^2}} \\mathbb 1_{i}^{obj} \\displaystyle{\\sum_{c∈classwa}} (p_i(c)-\\hat p_i(c))^2 $\n 1obji: cell i에 object가 나타났는지 여부를 의미합니다. 1objij: cell i에 있는 j번째 bounding box가 cell i에 있는 GT에 해당하는 예측값인지 여부입니다. 즉, cell i에 있는 j번째 bounding box가 GT와의 IOU가 가장 큰 지 여부입니다.    테스트 $$ Pr(Class_i|Object) * Pr(Object) * IOU^{truth}{pred} = Pr(Class_i) * IOU^{truth}{pred} $$\n  테스트할 때는 class probability와 confidence score를 곱해서 최종 score를 계산합니다. 최종 score는 해당 박스에 class가 나타날 확률과 예측한 box가 실제 object에 얼마나 잘 맞는 지 두 가지 의미를 모두 갖고 있습니다. 아래 그림의 bounding box 선의 굵기가 confidence를 의미합니다. 이 confidence와 class probability를 곱하여 threshold 이상의 결과가 최종 결과가 됩니다. 출처: Joseph Redmon, Santosh Divvala, Ross Girshick, Ali Farhadi, You Only Look Once: Unified, Real-Time Object Detection, Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2016, pp.780, Figure 2  ","date":"2023-05-29T00:17:41+09:00","permalink":"https://kimberlykang.github.io/p/yolov1_review/","title":"YOLOv1 리뷰"},{"content":"본 포스트에서는 YOLOv5에서 anchor를 선정하는 방법에 대해서 알아보겠습니다.\n목차  동기 Genetic Algorithm YOLOv5에서 사용된 GA Autoanchor  동기 YOLOv5는 Glenn Jocher가 Github을 통해 발표한 모델입니다. 그는 Yolov5 이전에 Pytorch 버전의 YOLOv3 코드를 작성해서 Github에 공개 한 적이 있습니다. 이 때, 많은 사람들이 custom data set을 학습하며 올린 이슈를 보고 그는 사람들이 학습하고자 하는 dataset의 bounding box 가로 세로 비율이 COCO dataset bounding box의 가로 세로 비율과 많이 다르다는 사실을 발견하게 됩니다. 이 문제를 해결하기 위해, 그는 그 당시에 anchor box를 선정할 때 많이 쓰이던 k-means에 genetic algorithm을 추가적으로 접목시키고, 이 모든 과정을 자동으로 수행해주는 autoanchor를 YOLOv5에 소개합니다. 이에 관한 내용은 아래 링크의 인터뷰에서 더 자세히 확인하실 수 있습니다.\nhttps://www.youtube.com/watch?v=O4jOqVqyAo8\nGenetic Algorithm Genetic Algorithm(GA)는 진화 과정에서 착안한 문제 해결 방법입니다. GA를 이해하기 위해서 필요한 용어에 대해 먼저 살펴보겠습니다.\n Population: 주어진 문제에 대한 해결 방법 집합 Chromosome: 염색체. 유전자로 이루어져 있습니다. 하나의 문제 해결 방법을 의미합니다. Crossover: 부모의 유전자를 사용하여 자손이 생성됩니다. Mutation: 유전자 일부가 변화합니다. 적합도: 해당 문제에 대해 염색체에 해당하는 해결 방식이 얼마나 적합한지를 의미합니다.  GA는 아래의 순서로 수행이 됩니다.\nYOLOv5에서 사용된 GA yolo에서는 위에서 살펴본 GA 과정이 아래와 같이 변형되어 진행됩니다.\n YOLOv5의 population은 bounding box의 가로 세로가 됩니다. 그리고 GA를 통해 가장 적합한 anchor box의 가로 세로 크기를 구하려고 합니다. 부모를 선택할 때에는 k-means를 사용합니다. k개의 centroid(가로, 세로)를 구한 뒤, 각 centroid가 단독 부모가 됩니다. k개의 단독 부모에 대해 crossover는 하지 않고 generation 하고자 하는 수만큼 mutation만 합니다. default로는 각 k개 부모마다 1000개의 (가로, 세로)를 mutation합니다. 재생산한 1000개 (w, h) 사이의 적합도를 계산해서 가장 높은 하나를 선택합니다. 결국 k개의 (w, h)가 선택되는데, 이게 YOLOv5에서 사용하는 anchor box가 됩니다.  Autoanchor dataloader를 만든 후 학습에 들어가기 전, 현재 anchor가 현재 데이터에 적합한 anchor인지 check_anchors를 통해 확인합니다. 이 함수 내부에서 Autoanchor가 수행됩니다.\n1 2 3  if not resume: if not opt.noautoanchor: check_anchors(dataset, model=model, thr=hyp[\u0026#39;anchor_t\u0026#39;], imgsz=imgsz) # run AutoAnchor   현재 anchor가 적합한 anchor인지 판별한는 데에는 아래의 metric이 사용됩니다. 여기서 wh는 전체 bounding box의 [가로, 세로] array이고, k는 현재 anchor의 [가로, 세로] array입니다.\n1 2 3 4 5 6 7  def metric(k): # compute metric r = wh[:, None] / k[None] x = torch.min(r, 1 / r).min(2)[0] # ratio metric best = x.max(1)[0] # best_x aat = (x \u0026gt; 1 / thr).float().sum(1).mean() # anchors above threshold bpr = (best \u0026gt; 1 / thr).float().mean() # best possible recall return bpr, aat     torch.min(r, 1 / r): bounding box의 가로, 세로를 각 anchor box의 가로 세로로 나누어 비율을 구합니다. (bbox 갯수, anchor 갯수, 2)의 shape을 가집니다.\n  x = torch.min(r, 1 / r).min(2)[0]: bounding box의 anchor box에 대한 가로 세로 비율 중 더 작은 것을 선택합니다. 즉 bounding box마다 각 anchor에 대한 비율을 하나씩 갖게 됩니다. (bbox갯수, anchor 갯수)의 shape을 가집니다.\n  best = x.max(1)[0]: bounding box는 가장 비율이 높은 anchor 하나를 선정합니다. best는 가장 비율이 높은 anchor와의 비율 값 array입니다. (bbox 갯수)의 shape을 가집니다.\n  aat = (x \u0026gt; 1 / thr).float().sum(1).mean()\n  bpr = (best \u0026gt; 1 / thr).float().mean()\n  bpr이 0.98보다 작으면 k_mean_ahcnors 함수를 통해 새로운 anchor를 만들어줍니다.\n1 2 3 4 5 6  if bpr \u0026gt; 0.98: # threshold to recompute LOGGER.info(f\u0026#39;{s}Current anchors are a good fit to dataset ✅\u0026#39;) else: LOGGER.info(f\u0026#39;{s}Anchors are a poor fit to dataset ⚠️, attempting to improve...\u0026#39;) na = m.anchors.numel() // 2 # number of anchors anchors = kmean_anchors(dataset, n=na, img_size=imgsz, thr=thr, gen=1000, verbose=False)   kmean_anchors에서는 먼저 k-means로 bounding box에서 k개의 centroid를 구해줍니다.\n1 2 3  from scipy.cluster.vq import kmeans s = wh.std(0) # sigmas for whitening k = kmeans(wh / s, n, iter=30)[0] * s # points   centroid를 구했으면 그 centroid를 사용해서 mutatation을 한 다음 anchor_fitness를 통해 적합도를 계산해 줍니다. 위에서 사용된 것과 동일하게 가로, 세로 비율을 고려한 동일한 metric이 사용됩니다.\n1 2 3 4 5  def metric(k, wh): # compute metrics r = wh[:, None] / k[None] x = torch.min(r, 1 / r).min(2)[0] # ratio metric # x = wh_iou(wh, torch.tensor(k)) # iou metric return x, x.max(1)[0] # x, best_x   mutation은 gen갯수만큼 mutation을 해 주는데 default는 1000개입니다. 1000개의 mutation을 하고 그 중 가장 적합도가 높은 것을 anchor로 반환합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # Evolve f, sh, mp, s = anchor_fitness(k), k.shape, 0.9, 0.1 # fitness, generations, mutation prob, sigma pbar = tqdm(range(gen), bar_format=TQDM_BAR_FORMAT) # progress bar for _ in pbar: v = np.ones(sh) while (v == 1).all(): # mutate until a change occurs (prevent duplicates) v = ((npr.random(sh) \u0026lt; mp) * random.random() * npr.randn(*sh) * s + 1).clip(0.3, 3.0) kg = (k.copy() * v).clip(min=2.0) fg = anchor_fitness(kg) if fg \u0026gt; f: f, k = fg, kg.copy() pbar.desc = f\u0026#39;{PREFIX}Evolving anchors with Genetic Algorithm: fitness = {f:.4f}\u0026#39; if verbose: print_results(k, verbose) return print_results(k).astype(np.float32)   ","date":"2023-02-06T00:20:00+09:00","permalink":"https://kimberlykang.github.io/p/yolov5_anchor/","title":"YOLOv5 anchor"},{"content":"본 포스트에서는 YOLOv5 리파지토리의 train.py 코드를 전체적으로 살펴보도록 하겠습니다.\n목차  Data parellel 학습 조건 프린트 및 저장 Logger torch_distributed_zero_first Dataloader  Data parellel 학습 코드 중간 중간 RANK라는 variable이 나오는데, 이를 이해하기 위해선 data parellel의 몇 가지 용어들을 이해해야 합니다. 코드를 보기 전에 먼저 용어를 간단히 살펴보겠습니다.\n data parellel: 모델 학습 방법 중 하나입니다. 모델 복사본 여러 개를 만들어, 각 복사된 모델에서 동시에 parellel하게 학습이 이루어집니다. 이 때 각 복사된 모델은 각기 다른 데이터를 학습하고, local gradients/sub-gradients를 계산한 뒤, synchronization 작업을 통해 복사본 전체의 gradients를 계산하게 됩니다. node: data parellel 학습을 할 때, 학습이 이루어지는 머신 혹은 서버입니다 각 node에서는 여러 개의 process를 만들어 모델을 복사한 뒤, 복사된 모델에서 학습이 진행됩니다. rank: node에 복사된 각 process의 id입니다. node가 여러 개 있을 때, rank는 local rank와 global rank로 나뉘게 되는데, local rank는 한 node 안에서의 id이고, global rank는 전체 node 안에 있는 모든 process에 id를 매긴 것입니다. world: 전체 node 안의 모든 process를 포함하는 그룹입니다. world 안에 있는 process 갯수를 world size라고 합니다. 보통 모델 복사본 하나가 GPU 하나를 사용하고, 따라서 process 하나를 만들기 때문에 world size는 주로 GPU 갯수인 경우가 많습니다. 하지만 경우에 따라 모델이 큰 경우에 모델 복사본 하나가 GPU 여러 개를 사용하는 경우도 있습니다.  출처: https://github.com/pytorch/examples/blob/main/distributed/ddp/README.md\n위 그림은 두 개 노드에서 학습을 하는 data parellel application입니다. 위 모델은 모델 복사본 하나 당 GPU 두 개를 사용하여 학습하여, 각 node안의 GPU0, GPU1에서 LOCAL RANK0을 가진 process가, GPU2, GPU3에서 LOCAL RANK1을 가진 process가 학습을 진행하게 됩니다. GLOBAL RANK는 node에 상관 없이 전체 process에 대해 0~3까지 할당됩니다.\n학습 조건 프린트 및 저장 main 함수가 시작되면 아래와 같이 현재 args를 프린트하고, 학습에 필요한 것들을 체크하는 코드가 있습니다. 이 때 위에서 살펴본 RANK가 나오는데, RANK가 -1인 경우는 data parellel을 사용하지 않는 경우입니다. 하나의 process에서만 프린트하기 위해 아래와 같이 rank가 0일 경우에만 코드를 실행합니다. check_git_status는 현재 브랜치의 커밋 내역을 확인하여 pull 받을 커밋이 있다면 자동으로 git pull 해 주는 함수입니다. 개인적으로는 코드 관리 및 재현에 용이하게 하기 위해 아래와 같이 코멘트처리 한 뒤 필요할 때마다 수동으로 git pull해서 사용하고 있습니다.\n1 2 3 4 5  # main 함수 if RANK in {-1, 0}: print_args(vars(opt)) # check_git_status() check_requirements()   학습이 시작되면 아래에서 현재 학습에 사용하고 있는 하이퍼파라미터와 학습 관련된 세팅을 저장합니다. 각 파일은 runs/train/exp 폴더에 저장되어 학습이 종료 후 학습에 사용한 설정을 확인할 수 있습니다. exp 폴더는 학습을 새로 할 때마다 exp1 exp2와 같이 자동으로 숫자가 커지며 폴더가 새로 생성됩니다.\n1 2 3 4  # train 함수 if not evolve: yaml_save(save_dir / \u0026#39;hyp.yaml\u0026#39;, hyp) yaml_save(save_dir / \u0026#39;opt.yaml\u0026#39;, vars(opt))   Logger 1 2 3 4 5 6  if RANK in {-1, 0}: loggers = Loggers(save_dir, weights, opt, hyp, LOGGER) # loggers instance # Register actions for k in methods(loggers): callbacks.register_action(k, callback=getattr(loggers, k))   로깅을 한 번만 하기 위해 rank가 0일 경우 Logger 객체를 만듭니다. 그런 다음 loggers의 함수를 각 함수의 이름으로 callback에 등록해 줍니다. 함수를 호출 할 때에는 함수 이름을 이용하여 아래와 같이 호출해줍니다.\n1  callbacks.run(\u0026#39;on_pretrain_routine_end\u0026#39;, labels, names)   예를 들면 위 코드는 학습을 위한 설정 후 실행됩니다. 위 코드가 실행되면 Loggers 클래스의 on_pretrain_routine_end 함수가 실행되어 레이블에 관한 정보를 이미지로 저장합니다.\ntorch_distributed_zero_first 첫 번째 rank가 먼저 수행되어야 하는 코드가 있을 때, yolov5에서는 torch_distributed_zero_first 함수를 만들어 이를 수행하고 있습니다.\n1 2 3 4 5 6 7 8  @contextmanager def torch_distributed_zero_first(local_rank: int): # Decorator to make all processes in distributed training wait for each local_master to do something if local_rank not in [-1, 0]: dist.barrier(device_ids=[local_rank]) yield if local_rank == 0: dist.barrier(device_ids=[0])   torch_distributed_zero_first 함수는 torch의 contextmanager decorator와 barrier 함수를 이용하여 정의되어 있습니다.\n @contextmanager와 함께 정의된 함수는 yield 전에 선언된 코드는 with 코드 블록이 실행되기 전에 수행이 되고, yield 후에 선언된 코드는 with 코드 블록이 실행된 후 수행이 됩니다. barrier 함수는 전체 그룹이 barrier 함수에 도달할 때까지 process를 block합니다. 위의 torch_distributed_zero_first에서는 rank0을 제외한 나머지 process는 yield 전에서 rank0를 기다리게 되고, rank0 혼자 yield를 만나 with 코드 블록을 수행합니다. 후에 rank0이 barrier를 만나게 되면 나머지 process들도 yield를 만나 with 코드 블록을 수행하게 됩니다. 이 과정을 통해 rank0가 항상 with 코드 블록을 다른 process보다 먼저 수행하게 됩니다.  1 2  with torch_distributed_zero_first(LOCAL_RANK): data_dict = data_dict or check_dataset(data)   위는 학습 코드에서 torch_distributed_zero_first가 사용된 예입니다. * rank0을 제외한 나머지 process는 rank0가 check_dataset(data)를 수행 후 barrier를 만날 때까지 기다립니다.\n rank0는 check_dataset를 수행하여 데이터가 없으면 다운받습니다. check_dataset 함수 수행이 끝난 후 rank0는 barrier 를 만납니다. 나머지 process들도 check_dataset를 수행하게 됩니다. 이 때, 데이터는 이미 rank0에서 다운받았기 때문에 다시 다운받지 않습니다. torch_distributed_zero_first 함수를 사용함으로써 다운로드를 한 번만 받게 됩니다.  Optimizer \u0026amp; Learning rate schedule train을 시작할 때 optimizer argument를 주지 않는다면 default인 SGD가 사용됩니다. lr0, momentum, weight_decay는 학습 시작시 지정한 하이퍼파라미터에서 가져옵니다.\n1  optimizer = smart_optimizer(model, opt.optimizer, hyp[\u0026#39;lr0\u0026#39;], hyp[\u0026#39;momentum\u0026#39;], hyp[\u0026#39;weight_decay\u0026#39;])   Learning rate은 default로 Linear learning rate을 사용합니다. 아래와 같이 LambdaLR을 사용하여 구현되어 있습니다.\n1 2 3 4 5  if opt.cos_lr: lf = one_cycle(1, hyp[\u0026#39;lrf\u0026#39;], epochs) # cosine 1-\u0026gt;hyp[\u0026#39;lrf\u0026#39;] else: lf = lambda x: (1 - x / epochs) * (1.0 - hyp[\u0026#39;lrf\u0026#39;]) + hyp[\u0026#39;lrf\u0026#39;] # linear scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)   Dataloader 각 rank마다 dataloader가 생기므로, 전체 batch size를 WORLD_SIZE로 나눈 것이 새로운 batch size가 되어 dataloader를 만들게 됩니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  train_loader, dataset = create_dataloader(train_path, imgsz, batch_size // WORLD_SIZE, gs, single_cls, hyp=hyp, augment=True, cache=None if opt.cache == \u0026#39;val\u0026#39; else opt.cache, rect=opt.rect, rank=LOCAL_RANK, workers=workers, image_weights=opt.image_weights, quad=opt.quad, prefix=colorstr(\u0026#39;train: \u0026#39;), shuffle=True, seed=opt.seed)   현재 YOLOv5에서는 validation은 single-GPU만 지원하고 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13  if RANK in {-1, 0}: val_loader = create_dataloader(val_path, imgsz, batch_size // WORLD_SIZE * 2, gs, single_cls, hyp=hyp, cache=None if noval else opt.cache, rect=True, rank=-1, workers=workers * 2, pad=0.5, prefix=colorstr(\u0026#39;val: \u0026#39;))[0]   ","date":"2023-02-06T00:20:00+09:00","permalink":"https://kimberlykang.github.io/p/yolov5_train/","title":"YOLOv5 학습"}]